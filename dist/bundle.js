!function(Q,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define("ecstatic",[],n):"object"==typeof exports?exports.ecstatic=n():Q.ecstatic=n()}(window,(function(){return function(Q){var n=window.webpackHotUpdateecstatic;window.webpackHotUpdateecstatic=function(Q,B){!function(Q,n){if(!V[Q]||!y[Q])return;for(var B in y[Q]=!1,n)Object.prototype.hasOwnProperty.call(n,B)&&(b[B]=n[B]);0==--G&&0===u&&Z()}(Q,B),n&&n(Q,B)};var B,e=!0,t="3efab3e406df0cdf40d1",F={},s=[],I=[];function i(Q){var n=N[Q];if(!n)return m;var e=function(e){return n.hot.active?(N[e]?-1===N[e].parents.indexOf(Q)&&N[e].parents.push(Q):(s=[Q],B=e),-1===n.children.indexOf(e)&&n.children.push(e)):(console.warn("[HMR] unexpected require("+e+") from disposed module "+Q),s=[]),m(e)},t=function(Q){return{configurable:!0,enumerable:!0,get:function(){return m[Q]},set:function(n){m[Q]=n}}};for(var F in m)Object.prototype.hasOwnProperty.call(m,F)&&"e"!==F&&"t"!==F&&Object.defineProperty(e,F,t(F));return e.e=function(Q){return"ready"===U&&g("prepare"),u++,m.e(Q).then(n,(function(Q){throw n(),Q}));function n(){u--,"prepare"===U&&(a[Q]||R(Q),0===u&&0===G&&Z())}},e.t=function(Q,n){return 1&n&&(Q=e(Q)),m.t(Q,-2&n)},e}function l(n){var e={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:B!==n,active:!0,accept:function(Q,n){if(void 0===Q)e._selfAccepted=!0;else if("function"==typeof Q)e._selfAccepted=Q;else if("object"==typeof Q)for(var B=0;B<Q.length;B++)e._acceptedDependencies[Q[B]]=n||function(){};else e._acceptedDependencies[Q]=n||function(){}},decline:function(Q){if(void 0===Q)e._selfDeclined=!0;else if("object"==typeof Q)for(var n=0;n<Q.length;n++)e._declinedDependencies[Q[n]]=!0;else e._declinedDependencies[Q]=!0},dispose:function(Q){e._disposeHandlers.push(Q)},addDisposeHandler:function(Q){e._disposeHandlers.push(Q)},removeDisposeHandler:function(Q){var n=e._disposeHandlers.indexOf(Q);n>=0&&e._disposeHandlers.splice(n,1)},invalidate:function(){switch(this._selfInvalidated=!0,U){case"idle":(b={})[n]=Q[n],g("ready");break;case"ready":E(n);break;case"prepare":case"check":case"dispose":case"apply":(C=C||[]).push(n)}},check:x,apply:r,status:function(Q){if(!Q)return U;c.push(Q)},addStatusHandler:function(Q){c.push(Q)},removeStatusHandler:function(Q){var n=c.indexOf(Q);n>=0&&c.splice(n,1)},data:F[n]};return B=void 0,e}var c=[],U="idle";function g(Q){U=Q;for(var n=0;n<c.length;n++)c[n].call(null,Q)}var d,b,o,C,G=0,u=0,a={},y={},V={};function X(Q){return+Q+""===Q?+Q:Q}function x(Q){if("idle"!==U)throw new Error("check() is only allowed in idle status");return e=Q,g("check"),(n=1e4,n=n||1e4,new Promise((function(Q,B){if("undefined"==typeof XMLHttpRequest)return B(new Error("No browser support"));try{var e=new XMLHttpRequest,t=m.p+"hot/hot-update.json";e.open("GET",t,!0),e.timeout=n,e.send(null)}catch(Q){return B(Q)}e.onreadystatechange=function(){if(4===e.readyState)if(0===e.status)B(new Error("Manifest request to "+t+" timed out."));else if(404===e.status)Q();else if(200!==e.status&&304!==e.status)B(new Error("Manifest request to "+t+" failed."));else{try{var n=JSON.parse(e.responseText)}catch(Q){return void B(Q)}Q(n)}}}))).then((function(Q){if(!Q)return g(L()?"ready":"idle"),null;y={},a={},V=Q.c,o=Q.h,g("prepare");var n=new Promise((function(Q,n){d={resolve:Q,reject:n}}));b={};return R(0),"prepare"===U&&0===u&&0===G&&Z(),n}));var n}function R(Q){var n;V[Q]?(y[Q]=!0,G++,(n=document.createElement("script")).charset="utf-8",n.src=m.p+"hot/hot-update.js",document.head.appendChild(n)):a[Q]=!0}function Z(){g("ready");var Q=d;if(d=null,Q)if(e)Promise.resolve().then((function(){return r(e)})).then((function(n){Q.resolve(n)}),(function(n){Q.reject(n)}));else{var n=[];for(var B in b)Object.prototype.hasOwnProperty.call(b,B)&&n.push(X(B));Q.resolve(n)}}function r(n){if("ready"!==U)throw new Error("apply() is only allowed in ready status");return function n(e){var I,i,l,c,U;function d(Q){for(var n=[Q],B={},e=n.map((function(Q){return{chain:[Q],id:Q}}));e.length>0;){var t=e.pop(),F=t.id,s=t.chain;if((c=N[F])&&(!c.hot._selfAccepted||c.hot._selfInvalidated)){if(c.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:F};if(c.hot._main)return{type:"unaccepted",chain:s,moduleId:F};for(var I=0;I<c.parents.length;I++){var i=c.parents[I],l=N[i];if(l){if(l.hot._declinedDependencies[F])return{type:"declined",chain:s.concat([i]),moduleId:F,parentId:i};-1===n.indexOf(i)&&(l.hot._acceptedDependencies[F]?(B[i]||(B[i]=[]),G(B[i],[F])):(delete B[i],n.push(i),e.push({chain:s.concat([i]),id:i})))}}}}return{type:"accepted",moduleId:Q,outdatedModules:n,outdatedDependencies:B}}function G(Q,n){for(var B=0;B<n.length;B++){var e=n[B];-1===Q.indexOf(e)&&Q.push(e)}}L();var u={},a=[],y={},x=function(){console.warn("[HMR] unexpected require("+Z.moduleId+") to disposed module")};for(var R in b)if(Object.prototype.hasOwnProperty.call(b,R)){var Z;U=X(R),Z=b[R]?d(U):{type:"disposed",moduleId:R};var r=!1,E=!1,p=!1,W="";switch(Z.chain&&(W="\nUpdate propagation: "+Z.chain.join(" -> ")),Z.type){case"self-declined":e.onDeclined&&e.onDeclined(Z),e.ignoreDeclined||(r=new Error("Aborted because of self decline: "+Z.moduleId+W));break;case"declined":e.onDeclined&&e.onDeclined(Z),e.ignoreDeclined||(r=new Error("Aborted because of declined dependency: "+Z.moduleId+" in "+Z.parentId+W));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(Z),e.ignoreUnaccepted||(r=new Error("Aborted because "+U+" is not accepted"+W));break;case"accepted":e.onAccepted&&e.onAccepted(Z),E=!0;break;case"disposed":e.onDisposed&&e.onDisposed(Z),p=!0;break;default:throw new Error("Unexception type "+Z.type)}if(r)return g("abort"),Promise.reject(r);if(E)for(U in y[U]=b[U],G(a,Z.outdatedModules),Z.outdatedDependencies)Object.prototype.hasOwnProperty.call(Z.outdatedDependencies,U)&&(u[U]||(u[U]=[]),G(u[U],Z.outdatedDependencies[U]));p&&(G(a,[Z.moduleId]),y[U]=x)}var A,h=[];for(i=0;i<a.length;i++)U=a[i],N[U]&&N[U].hot._selfAccepted&&y[U]!==x&&!N[U].hot._selfInvalidated&&h.push({module:U,parents:N[U].parents.slice(),errorHandler:N[U].hot._selfAccepted});g("dispose"),Object.keys(V).forEach((function(Q){!1===V[Q]&&function(Q){delete installedChunks[Q]}(Q)}));var D,S,v=a.slice();for(;v.length>0;)if(U=v.pop(),c=N[U]){var H={},Y=c.hot._disposeHandlers;for(l=0;l<Y.length;l++)(I=Y[l])(H);for(F[U]=H,c.hot.active=!1,delete N[U],delete u[U],l=0;l<c.children.length;l++){var T=N[c.children[l]];T&&((A=T.parents.indexOf(U))>=0&&T.parents.splice(A,1))}}for(U in u)if(Object.prototype.hasOwnProperty.call(u,U)&&(c=N[U]))for(S=u[U],l=0;l<S.length;l++)D=S[l],(A=c.children.indexOf(D))>=0&&c.children.splice(A,1);g("apply"),void 0!==o&&(t=o,o=void 0);for(U in b=void 0,y)Object.prototype.hasOwnProperty.call(y,U)&&(Q[U]=y[U]);var z=null;for(U in u)if(Object.prototype.hasOwnProperty.call(u,U)&&(c=N[U])){S=u[U];var J=[];for(i=0;i<S.length;i++)if(D=S[i],I=c.hot._acceptedDependencies[D]){if(-1!==J.indexOf(I))continue;J.push(I)}for(i=0;i<J.length;i++){I=J[i];try{I(S)}catch(Q){e.onErrored&&e.onErrored({type:"accept-errored",moduleId:U,dependencyId:S[i],error:Q}),e.ignoreErrored||z||(z=Q)}}}for(i=0;i<h.length;i++){var f=h[i];U=f.module,s=f.parents,B=U;try{m(U)}catch(Q){if("function"==typeof f.errorHandler)try{f.errorHandler(Q)}catch(n){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:U,error:n,originalError:Q}),e.ignoreErrored||z||(z=n),z||(z=Q)}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:U,error:Q}),e.ignoreErrored||z||(z=Q)}}if(z)return g("fail"),Promise.reject(z);if(C)return n(e).then((function(Q){return a.forEach((function(n){Q.indexOf(n)<0&&Q.push(n)})),Q}));return g("idle"),new Promise((function(Q){Q(a)}))}(n=n||{})}function L(){if(C)return b||(b={}),C.forEach(E),C=void 0,!0}function E(n){Object.prototype.hasOwnProperty.call(b,n)||(b[n]=Q[n])}var N={};function m(n){if(N[n])return N[n].exports;var B=N[n]={i:n,l:!1,exports:{},hot:l(n),parents:(I=s,s=[],I),children:[]};return Q[n].call(B.exports,B,B.exports,i(n)),B.l=!0,B.exports}return m.m=Q,m.c=N,m.d=function(Q,n,B){m.o(Q,n)||Object.defineProperty(Q,n,{enumerable:!0,get:B})},m.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},m.t=function(Q,n){if(1&n&&(Q=m(Q)),8&n)return Q;if(4&n&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(m.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&n&&"string"!=typeof Q)for(var e in Q)m.d(B,e,function(n){return Q[n]}.bind(null,e));return B},m.n=function(Q){var n=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return m.d(n,"a",n),n},m.o=function(Q,n){return Object.prototype.hasOwnProperty.call(Q,n)},m.p="/static/",m.h=function(){return t},i(0)(m.s=0)}([function(Q,n,B){Q.exports=B(1)},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, "World", function() { return /* reexport */ World_World; });\n__webpack_require__.d(__webpack_exports__, "createEntity", function() { return /* reexport */ createEntity; });\n__webpack_require__.d(__webpack_exports__, "createSystem", function() { return /* reexport */ createSystem; });\n\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/rng.js\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nfunction rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== \'undefined\' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== \'undefined\' && typeof msCrypto.getRandomValues === \'function\' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error(\'crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported\');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/regex.js\n/* harmony default export */ var regex = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/validate.js\n\n\nfunction validate(uuid) {\n  return typeof uuid === \'string\' && regex.test(uuid);\n}\n\n/* harmony default export */ var esm_browser_validate = (validate);\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/stringify.js\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var stringify_i = 0; stringify_i < 256; ++stringify_i) {\n  byteToHex.push((stringify_i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It\'s been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + \'-\' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + \'-\' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + \'-\' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + \'-\' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it\'s likely due to one\n  // of the following:\n  // - One or more input array values don\'t map to a hex octet (leading to\n  // "undefined" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!esm_browser_validate(uuid)) {\n    throw TypeError(\'Stringified UUID is invalid\');\n  }\n\n  return uuid;\n}\n\n/* harmony default export */ var esm_browser_stringify = (stringify);\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/v4.js\n\n\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return esm_browser_stringify(rnds);\n}\n\n/* harmony default export */ var esm_browser_v4 = (v4);\n// CONCATENATED MODULE: ./src/guards.ts\n// export function classIsCompType(cl: any)\nfunction isComponentInstance(Class, comp) {\n  if (!comp) {\n    return false;\n  }\n\n  if (!(comp instanceof Class)) {\n    return false;\n  }\n\n  return true;\n}\nfunction isComponentName(possibleName, entitiesByCTypes) {\n  // string\n  if (typeof possibleName !== \'string\') {\n    return false;\n  }\n\n  for (const a of entitiesByCTypes.keys()) {\n    if (a.includes(possibleName)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n// CONCATENATED MODULE: ./src/ComponentCollection.ts\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n// CT is a Union, like `type = typeof FirstComponent | typeof SecondComponent`.\nclass ComponentCollection_ComponentCollection {\n  constructor() {\n    _defineProperty(this, "components", new Map());\n\n    _defineProperty(this, "add", component => {\n      this.components.set(component.constructor.name, component);\n    });\n\n    _defineProperty(this, "update", (cl, func) => {\n      const c = this.components.get(cl.name);\n\n      if (isComponentInstance(cl, c)) {\n        const updatedComponent = func(c);\n        this.components.set(cl.name, updatedComponent);\n      }\n    });\n\n    _defineProperty(this, "remove", cType => {\n      this.components.delete(cType.name);\n    });\n\n    _defineProperty(this, "get", cl => {\n      const comp = this.components.get(cl.name);\n\n      if (isComponentInstance(cl, comp)) {\n        return comp;\n      } else {\n        throw new Error(`ComponentCollection does not have component of type ${cl.name}`);\n      }\n    });\n\n    _defineProperty(this, "has", cType => {\n      return Array.isArray(cType) ? cType.every(ct => this.components.has(ct.name) === true) : this.components.has(cType.name);\n    });\n\n    _defineProperty(this, "hasByName", cName => {\n      return Array.isArray(cName) ? cName.every(ct => this.components.has(ct) === true) : this.components.has(cName);\n    });\n  }\n\n  /**\n   * Get the component type names that are currently being used in the collection.\n   */\n  get componentTypes() {\n    return [...this.components.keys()];\n  }\n  /**\n   * Get the current number of components that are in the collection.\n   */\n\n\n  get size() {\n    return this.components.size;\n  }\n\n  toDevComponents() {\n    const obj = {};\n\n    for (const [compName, comp] of this.components) {\n      obj[compName] = comp;\n    }\n\n    return obj;\n  }\n\n}\n// CONCATENATED MODULE: ./src/DevEntity.ts\nfunction DevEntity_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nclass DevEntity {\n  constructor(entity, world) {\n    DevEntity_defineProperty(this, "id", void 0);\n\n    DevEntity_defineProperty(this, "components", void 0);\n\n    DevEntity_defineProperty(this, "tags", void 0);\n\n    this.id = entity.id;\n    this.components = entity.components.toDevComponents(), this.tags = [...entity.tags]; // get all the systems that would trigger with this entity...\n  }\n\n}\n\n/* harmony default export */ var src_DevEntity = (DevEntity);\n// CONCATENATED MODULE: ./src/Entity.ts\nfunction Entity_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nclass Entity_Entity {\n  constructor(world) {\n    Entity_defineProperty(this, "_id", void 0);\n\n    Entity_defineProperty(this, "_world", void 0);\n\n    this._id = esm_browser_v4();\n    this._world = world;\n    /*\n    Registering with the World.\n    */\n\n    this._world.registerEntity(this);\n  }\n  /**\n   * Add a component to an Entity, doh.\n   */\n\n\n  add(component) {\n    this._world.set(this._id, component);\n\n    return this;\n  }\n  /**\n   * Add a tag to a component\n   */\n\n\n  addTag(tag) {\n    const entitySet = this._world.entitiesByTags.has(tag) ? this._world.entitiesByTags.get(tag) : new Set();\n\n    if (entitySet) {\n      entitySet.add(this._id);\n\n      this._world.entitiesByTags.set(tag, entitySet);\n    }\n\n    return this;\n  }\n  /**\n   * Determines if an entity has a component related to it.\n   */\n\n\n  has(cType) {\n    const cc = this._world.componentCollections.get(this._id) || new ComponentCollection_ComponentCollection();\n    return cc.has(cType);\n  }\n  /**\n   * Check to see if an entity tagged with a given tag.\n   */\n\n\n  hasTag(tag) {\n    if (this._world.entitiesByTags.has(tag)) {\n      const entitySet = this._world.entitiesByTags.get(tag);\n\n      if (entitySet) {\n        return entitySet.has(this._id);\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Get a component that belongs to an entity.\n   */\n\n\n  get(cl) {\n    const cc = this._world.componentCollections.get(this._id) || new ComponentCollection_ComponentCollection();\n    const component = cc.get(cl);\n    return component;\n  }\n  /**\n   * Get all components that have been added to an entity, via a ComponentCollection\n   */\n\n\n  getAll() {\n    return this._world.componentCollections.get(this._id) || new ComponentCollection_ComponentCollection();\n  }\n  /**\n   * Remove a component from an entity.\n   * @param cType A component class, eg MyComponent\n   */\n\n\n  remove(cType) {\n    this._world.remove(this._id, cType);\n\n    return this;\n  }\n  /**\n   * Remove a tag from an entity\n   */\n\n\n  removeTag(tag) {\n    if (this._world.entitiesByTags.has(tag)) {\n      const entitySet = this._world.entitiesByTags.get(tag);\n\n      if (entitySet) {\n        entitySet.delete(this._id);\n\n        if (entitySet.size === 0) {\n          this._world.entitiesByTags.delete(tag);\n        }\n      }\n    }\n\n    return this;\n  }\n  /** Clears all components from an Entity */\n\n\n  clear() {\n    this._world.clearEntityComponents(this._id);\n\n    return this;\n  }\n  /**\n   * Remove all tags on an entity\n   */\n\n\n  clearTags() {\n    for (const [tag, entitySet] of this._world.entitiesByTags.entries()) {\n      entitySet.delete(this._id);\n\n      if (entitySet.size === 0) {\n        this._world.entitiesByTags.delete(tag);\n      }\n    }\n\n    return this;\n  }\n\n  destroy() {\n    this._world.destroyEntity(this._id);\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get world() {\n    return this._world;\n  }\n  /**\n   * Get all components that have been added to an entity, via a ComponentCollection.\n   * Does the same thing as entityInstance.getAll().\n   */\n\n\n  get components() {\n    return this._world.componentCollections.get(this._id) || new ComponentCollection_ComponentCollection();\n  }\n  /**\n   * Retrieves all the tags that have been added to this entity.\n   */\n\n\n  get tags() {\n    const tags = new Set();\n\n    for (const [tag, entitySet] of this._world.entitiesByTags.entries()) {\n      if (entitySet.has(this._id)) {\n        tags.add(tag);\n      }\n    }\n\n    return tags;\n  }\n\n  toDevEntity() {\n    return new src_DevEntity(this);\n  }\n\n}\nfunction createEntity(world) {\n  const entity = new Entity_Entity(world);\n  return entity;\n}\n// CONCATENATED MODULE: ./src/System.ts\n\n\n\n/**\n * This is how you create a System.\n * @example\n * ```\n * createSystem(world, [\'ComponentType\'], ({ entity }) => \'Do fun system things here.\')\n * ```\n */\nfunction createSystem(world, cTypes, systemFunc) {\n  const cNames = cTypes.map(ct => ct.name);\n  world.registerSystem(cNames, systemFunc.name);\n  return () => {\n    let index = 0;\n    const size = world.entitiesByCTypes.size; // Used for matching the array of ComponentTypes which is the key\n    // of where the ComponentCollection is, with the array of ComponentTypes\n    // that are passes.\n    // Might be nice in the future to go back to a ref check on cTypes, but\n    // for now this doesn\'t seem to be that much of a perf hit.\n    // for (const ct of world.entitiesByCTypes.keys()) {\n    //   if (cTypes.length === ct.length && cTypes.every(c => ct.includes(c))) {\n    //     for (const eid of world.entitiesByCTypes.get(cTypes)) {\n    //       const args: SystemFuncArgs<CT> = {\n    //         entity: world.entities.get(eid),\n    //         components: world.componentCollections.get(eid),\n    //         world,\n    //         index,\n    //         size,\n    //         isFirst: index === 0,\n    //         isLast: index + 1 === size,\n    //       }\n    //       systemFunc(args);\n    //       index += 1;\n    //     }\n    //   }\n    // }\n\n    const cTypeArrs = world.entitiesByCTypes.get(cNames) || new Set();\n\n    for (const eid of cTypeArrs) {\n      const args = {\n        entity: world.entities.get(eid) || new Entity_Entity(world),\n        components: world.componentCollections.get(eid) || new ComponentCollection_ComponentCollection(),\n        world,\n        index,\n        size,\n        isFirst: index === 0,\n        isLast: index + 1 === size\n      };\n      systemFunc(args);\n      index += 1;\n    }\n  };\n}\n// CONCATENATED MODULE: ./src/DevTools.ts\nfunction DevTools_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nclass DevTools {\n  constructor(world) {\n    DevTools_defineProperty(this, "world", void 0);\n\n    this.world = world;\n  } // log a table of systems, and the components for them.\n\n\n  logSystemCompTable() {\n    const things = [];\n\n    for (const [systemName, compNames] of this.world.compNamesBySystemName) {\n      things.push({\n        systemName,\n        components: compNames.join(\',\')\n      });\n    }\n\n    console.table(things);\n  } // Would be nice to list all the systems that will apply to an entity.\n\n\n  get entities() {\n    return [...this.world.entities.values()].map(e => e.toDevEntity());\n  }\n\n}\n\n/* harmony default export */ var src_DevTools = (DevTools);\n// CONCATENATED MODULE: ./src/World.ts\nfunction World_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nclass World_World {\n  constructor() {\n    World_defineProperty(this, "componentCollections", new Map());\n\n    World_defineProperty(this, "entities", new Map());\n\n    World_defineProperty(this, "entitiesByCTypes", new Map());\n\n    World_defineProperty(this, "entitiesByTags", new Map());\n\n    World_defineProperty(this, "compNamesBySystemName", new Map());\n\n    World_defineProperty(this, "dev", void 0);\n\n    World_defineProperty(this, "find", predicate => {\n      for (const entity of this.entities.values()) {\n        if (predicate(entity)) {\n          return entity;\n        }\n      }\n\n      return null;\n    });\n\n    World_defineProperty(this, "findAll", predicate => {\n      const results = [];\n\n      for (const entity of this.entities.values()) {\n        if (predicate(entity)) {\n          results.push(entity);\n        }\n      }\n\n      return results;\n    });\n\n    World_defineProperty(this, "locate", cl => {\n      for (const entity of this.entities.values()) {\n        // console.log("entity?", entity.components, cl.name);\n        if (entity.components.has(cl)) {\n          return entity;\n        }\n      }\n\n      return null;\n    });\n\n    World_defineProperty(this, "locateAll", cl => {\n      const results = [];\n\n      for (const entity of this.entities.values()) {\n        if (entity.components.has(cl)) {\n          results.push(entity);\n        }\n      }\n\n      return results;\n    });\n\n    World_defineProperty(this, "grab", cl => {\n      // const entity = this.locate((cl as unknown) as CT[keyof CT]);\n      const entity = this.locate(cl);\n\n      if (entity) {\n        const cc = this.componentCollections.get(entity.id) || new ComponentCollection_ComponentCollection();\n        const component = cc.get(cl);\n        return {\n          entity,\n          component\n        };\n      }\n\n      return null;\n    });\n\n    World_defineProperty(this, "grabBy", (cl, predicate) => {\n      const entities = this.locateAll(cl);\n\n      for (const entity of entities) {\n        const cc = this.componentCollections.get(entity.id) || new ComponentCollection_ComponentCollection();\n        const component = cc.get(cl);\n\n        if (predicate(component)) {\n          return {\n            component,\n            entity\n          };\n        }\n      }\n\n      return null;\n    });\n\n    World_defineProperty(this, "grabAll", cl => {\n      const entities = this.locateAll(cl);\n      return entities.map(entity => {\n        return {\n          entity,\n          component: entity.components.get(cl)\n        };\n      });\n    });\n\n    World_defineProperty(this, "get", (eid, cl) => {\n      const cc = this.componentCollections.get(eid) || new ComponentCollection_ComponentCollection();\n      return cc.get(cl);\n    });\n\n    World_defineProperty(this, "getComponent", (cl, defaultValue) => {\n      const result = this.grab(cl);\n\n      if (!result) {\n        return defaultValue ? defaultValue : null;\n      }\n\n      return result.component;\n    });\n\n    World_defineProperty(this, "getTagged", tag => {\n      const tagEntityIds = this.entitiesByTags.get(tag);\n\n      if (tagEntityIds) {\n        const entityId = tagEntityIds.values().next().value;\n        const entity = this.entities.get(entityId);\n\n        if (entity) {\n          return entity;\n        }\n      }\n\n      return null;\n    });\n\n    World_defineProperty(this, "getAllTagged", tag => {\n      let entities = []; // eslint-disable-line\n\n      const tagEntityIds = this.entitiesByTags.get(tag);\n\n      if (tagEntityIds) {\n        for (const entityId of tagEntityIds) {\n          const entity = this.entities.get(entityId);\n\n          if (entity) {\n            entities.push(entity);\n          }\n        }\n      }\n\n      return entities;\n    });\n\n    World_defineProperty(this, "set", (eid, component) => {\n      const cc = this.componentCollections.get(eid) || new ComponentCollection_ComponentCollection();\n      cc.add(component);\n      this.componentCollections.set(eid, cc);\n\n      for (const [ctArr, entitySet] of this.entitiesByCTypes) {\n        if (ctArr.every(cc.hasByName)) {\n          entitySet.add(eid);\n        }\n      }\n\n      return this;\n    });\n\n    World_defineProperty(this, "remove", (eid, cType) => {\n      const cc = this.componentCollections.get(eid) || new ComponentCollection_ComponentCollection(); // remove entity from current entitiesByCTypes\n\n      for (const [ctArr, entitySet] of this.entitiesByCTypes) {\n        if (ctArr.every(cc.hasByName)) {\n          entitySet.delete(eid);\n        }\n      }\n\n      cc.remove(cType); // Move entityId to new CTypes if needed.\n\n      for (const [ctArr, entitySet] of this.entitiesByCTypes) {\n        if (ctArr.every(cc.hasByName)) {\n          entitySet.add(eid);\n        }\n      }\n\n      return this;\n    });\n\n    this.dev = new src_DevTools(this);\n  }\n  /**\n   * "finds" a single entity based on a predicate\n   */\n\n\n  /**\n   * Internal method used in setting up a new system.\n   */\n  registerSystem(cNames, systemName) {\n    this.compNamesBySystemName.set(systemName, [...cNames]);\n    this.entitiesByCTypes.set(cNames, new Set());\n    return this;\n  }\n  /**\n   * an alias for createSystem().\n   */\n\n\n  createSystem(cl, systemFunc) {\n    const system = createSystem(this, cl, systemFunc);\n    return system;\n  }\n\n  registerEntity(entity) {\n    const cc = new ComponentCollection_ComponentCollection();\n    this.componentCollections.set(entity.id, cc);\n    this.entities.set(entity.id, entity);\n    return this;\n  }\n  /**\n   * Remove all components that belong to an entity.\n   */\n\n\n  clearEntityComponents(eid) {\n    this.componentCollections.set(eid, new ComponentCollection_ComponentCollection());\n\n    for (const entitySet of this.entitiesByCTypes.values()) {\n      if (entitySet.has(eid)) {\n        entitySet.delete(eid);\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Create an entity that is in the world.\n   * Basically just new Entity(world), but saves an import of Entity.\n   */\n\n\n  createEntity() {\n    const entity = new Entity_Entity(this);\n    return entity;\n  }\n  /**\n   * Destroys an entity.\n   * Same as entity.destroy().\n   */\n\n\n  destroyEntity(eid) {\n    this.componentCollections.delete(eid);\n    this.entities.delete(eid);\n\n    for (const entitySet of this.entitiesByCTypes.values()) {\n      if (entitySet.has(eid)) {\n        entitySet.delete(eid);\n      }\n    } // remove any tag associations with destroyed entities.\n\n\n    for (const [tag, entitySet] of this.entitiesByTags) {\n      if (entitySet.has(eid)) {\n        entitySet.delete(eid);\n      }\n\n      if (entitySet.size === 0) {\n        this.entitiesByTags.delete(tag);\n      }\n    }\n\n    return this;\n  }\n\n}\n// CONCATENATED MODULE: ./src/index.ts\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')}])}));