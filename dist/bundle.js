!function(n,Q){"object"==typeof exports&&"object"==typeof module?module.exports=Q():"function"==typeof define&&define.amd?define("ecstatic",[],Q):"object"==typeof exports?exports.ecstatic=Q():n.ecstatic=Q()}(window,(function(){return function(n){var Q=window.webpackHotUpdateecstatic;window.webpackHotUpdateecstatic=function(n,B){!function(n,Q){if(!V[n]||!y[n])return;for(var B in y[n]=!1,Q)Object.prototype.hasOwnProperty.call(Q,B)&&(b[B]=Q[B]);0==--G&&0===u&&Z()}(n,B),Q&&Q(n,B)};var B,e=!0,t="df68e7387cafb32a7aae",F={},i=[],I=[];function l(n){var Q=p[n];if(!Q)return m;var e=function(e){return Q.hot.active?(p[e]?-1===p[e].parents.indexOf(n)&&p[e].parents.push(n):(i=[n],B=e),-1===Q.children.indexOf(e)&&Q.children.push(e)):(console.warn("[HMR] unexpected require("+e+") from disposed module "+n),i=[]),m(e)},t=function(n){return{configurable:!0,enumerable:!0,get:function(){return m[n]},set:function(Q){m[n]=Q}}};for(var F in m)Object.prototype.hasOwnProperty.call(m,F)&&"e"!==F&&"t"!==F&&Object.defineProperty(e,F,t(F));return e.e=function(n){return"ready"===c&&g("prepare"),u++,m.e(n).then(Q,(function(n){throw Q(),n}));function Q(){u--,"prepare"===c&&(a[n]||X(n),0===u&&0===G&&Z())}},e.t=function(n,Q){return 1&Q&&(n=e(n)),m.t(n,-2&Q)},e}function s(Q){var e={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:B!==Q,active:!0,accept:function(n,Q){if(void 0===n)e._selfAccepted=!0;else if("function"==typeof n)e._selfAccepted=n;else if("object"==typeof n)for(var B=0;B<n.length;B++)e._acceptedDependencies[n[B]]=Q||function(){};else e._acceptedDependencies[n]=Q||function(){}},decline:function(n){if(void 0===n)e._selfDeclined=!0;else if("object"==typeof n)for(var Q=0;Q<n.length;Q++)e._declinedDependencies[n[Q]]=!0;else e._declinedDependencies[n]=!0},dispose:function(n){e._disposeHandlers.push(n)},addDisposeHandler:function(n){e._disposeHandlers.push(n)},removeDisposeHandler:function(n){var Q=e._disposeHandlers.indexOf(n);Q>=0&&e._disposeHandlers.splice(Q,1)},invalidate:function(){switch(this._selfInvalidated=!0,c){case"idle":(b={})[Q]=n[Q],g("ready");break;case"ready":N(Q);break;case"prepare":case"check":case"dispose":case"apply":(C=C||[]).push(Q)}},check:r,apply:R,status:function(n){if(!n)return c;U.push(n)},addStatusHandler:function(n){U.push(n)},removeStatusHandler:function(n){var Q=U.indexOf(n);Q>=0&&U.splice(Q,1)},data:F[Q]};return B=void 0,e}var U=[],c="idle";function g(n){c=n;for(var Q=0;Q<U.length;Q++)U[Q].call(null,n)}var d,b,o,C,G=0,u=0,a={},y={},V={};function x(n){return+n+""===n?+n:n}function r(n){if("idle"!==c)throw new Error("check() is only allowed in idle status");return e=n,g("check"),(Q=1e4,Q=Q||1e4,new Promise((function(n,B){if("undefined"==typeof XMLHttpRequest)return B(new Error("No browser support"));try{var e=new XMLHttpRequest,t=m.p+"hot/hot-update.json";e.open("GET",t,!0),e.timeout=Q,e.send(null)}catch(n){return B(n)}e.onreadystatechange=function(){if(4===e.readyState)if(0===e.status)B(new Error("Manifest request to "+t+" timed out."));else if(404===e.status)n();else if(200!==e.status&&304!==e.status)B(new Error("Manifest request to "+t+" failed."));else{try{var Q=JSON.parse(e.responseText)}catch(n){return void B(n)}n(Q)}}}))).then((function(n){if(!n)return g(L()?"ready":"idle"),null;y={},a={},V=n.c,o=n.h,g("prepare");var Q=new Promise((function(n,Q){d={resolve:n,reject:Q}}));b={};return X(0),"prepare"===c&&0===u&&0===G&&Z(),Q}));var Q}function X(n){var Q;V[n]?(y[n]=!0,G++,(Q=document.createElement("script")).charset="utf-8",Q.src=m.p+"hot/hot-update.js",document.head.appendChild(Q)):a[n]=!0}function Z(){g("ready");var n=d;if(d=null,n)if(e)Promise.resolve().then((function(){return R(e)})).then((function(Q){n.resolve(Q)}),(function(Q){n.reject(Q)}));else{var Q=[];for(var B in b)Object.prototype.hasOwnProperty.call(b,B)&&Q.push(x(B));n.resolve(Q)}}function R(Q){if("ready"!==c)throw new Error("apply() is only allowed in ready status");return function Q(e){var I,l,s,U,c;function d(n){for(var Q=[n],B={},e=Q.map((function(n){return{chain:[n],id:n}}));e.length>0;){var t=e.pop(),F=t.id,i=t.chain;if((U=p[F])&&(!U.hot._selfAccepted||U.hot._selfInvalidated)){if(U.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:F};if(U.hot._main)return{type:"unaccepted",chain:i,moduleId:F};for(var I=0;I<U.parents.length;I++){var l=U.parents[I],s=p[l];if(s){if(s.hot._declinedDependencies[F])return{type:"declined",chain:i.concat([l]),moduleId:F,parentId:l};-1===Q.indexOf(l)&&(s.hot._acceptedDependencies[F]?(B[l]||(B[l]=[]),G(B[l],[F])):(delete B[l],Q.push(l),e.push({chain:i.concat([l]),id:l})))}}}}return{type:"accepted",moduleId:n,outdatedModules:Q,outdatedDependencies:B}}function G(n,Q){for(var B=0;B<Q.length;B++){var e=Q[B];-1===n.indexOf(e)&&n.push(e)}}L();var u={},a=[],y={},r=function(){console.warn("[HMR] unexpected require("+Z.moduleId+") to disposed module")};for(var X in b)if(Object.prototype.hasOwnProperty.call(b,X)){var Z;c=x(X),Z=b[X]?d(c):{type:"disposed",moduleId:X};var R=!1,N=!1,E=!1,A="";switch(Z.chain&&(A="\nUpdate propagation: "+Z.chain.join(" -> ")),Z.type){case"self-declined":e.onDeclined&&e.onDeclined(Z),e.ignoreDeclined||(R=new Error("Aborted because of self decline: "+Z.moduleId+A));break;case"declined":e.onDeclined&&e.onDeclined(Z),e.ignoreDeclined||(R=new Error("Aborted because of declined dependency: "+Z.moduleId+" in "+Z.parentId+A));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(Z),e.ignoreUnaccepted||(R=new Error("Aborted because "+c+" is not accepted"+A));break;case"accepted":e.onAccepted&&e.onAccepted(Z),N=!0;break;case"disposed":e.onDisposed&&e.onDisposed(Z),E=!0;break;default:throw new Error("Unexception type "+Z.type)}if(R)return g("abort"),Promise.reject(R);if(N)for(c in y[c]=b[c],G(a,Z.outdatedModules),Z.outdatedDependencies)Object.prototype.hasOwnProperty.call(Z.outdatedDependencies,c)&&(u[c]||(u[c]=[]),G(u[c],Z.outdatedDependencies[c]));E&&(G(a,[Z.moduleId]),y[c]=r)}var W,h=[];for(l=0;l<a.length;l++)c=a[l],p[c]&&p[c].hot._selfAccepted&&y[c]!==r&&!p[c].hot._selfInvalidated&&h.push({module:c,parents:p[c].parents.slice(),errorHandler:p[c].hot._selfAccepted});g("dispose"),Object.keys(V).forEach((function(n){!1===V[n]&&function(n){delete installedChunks[n]}(n)}));var S,v,D=a.slice();for(;D.length>0;)if(c=D.pop(),U=p[c]){var H={},Y=U.hot._disposeHandlers;for(s=0;s<Y.length;s++)(I=Y[s])(H);for(F[c]=H,U.hot.active=!1,delete p[c],delete u[c],s=0;s<U.children.length;s++){var z=p[U.children[s]];z&&((W=z.parents.indexOf(c))>=0&&z.parents.splice(W,1))}}for(c in u)if(Object.prototype.hasOwnProperty.call(u,c)&&(U=p[c]))for(v=u[c],s=0;s<v.length;s++)S=v[s],(W=U.children.indexOf(S))>=0&&U.children.splice(W,1);g("apply"),void 0!==o&&(t=o,o=void 0);for(c in b=void 0,y)Object.prototype.hasOwnProperty.call(y,c)&&(n[c]=y[c]);var f=null;for(c in u)if(Object.prototype.hasOwnProperty.call(u,c)&&(U=p[c])){v=u[c];var T=[];for(l=0;l<v.length;l++)if(S=v[l],I=U.hot._acceptedDependencies[S]){if(-1!==T.indexOf(I))continue;T.push(I)}for(l=0;l<T.length;l++){I=T[l];try{I(v)}catch(n){e.onErrored&&e.onErrored({type:"accept-errored",moduleId:c,dependencyId:v[l],error:n}),e.ignoreErrored||f||(f=n)}}}for(l=0;l<h.length;l++){var M=h[l];c=M.module,i=M.parents,B=c;try{m(c)}catch(n){if("function"==typeof M.errorHandler)try{M.errorHandler(n)}catch(Q){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:c,error:Q,originalError:n}),e.ignoreErrored||f||(f=Q),f||(f=n)}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:c,error:n}),e.ignoreErrored||f||(f=n)}}if(f)return g("fail"),Promise.reject(f);if(C)return Q(e).then((function(n){return a.forEach((function(Q){n.indexOf(Q)<0&&n.push(Q)})),n}));return g("idle"),new Promise((function(n){n(a)}))}(Q=Q||{})}function L(){if(C)return b||(b={}),C.forEach(N),C=void 0,!0}function N(Q){Object.prototype.hasOwnProperty.call(b,Q)||(b[Q]=n[Q])}var p={};function m(Q){if(p[Q])return p[Q].exports;var B=p[Q]={i:Q,l:!1,exports:{},hot:s(Q),parents:(I=i,i=[],I),children:[]};return n[Q].call(B.exports,B,B.exports,l(Q)),B.l=!0,B.exports}return m.m=n,m.c=p,m.d=function(n,Q,B){m.o(n,Q)||Object.defineProperty(n,Q,{enumerable:!0,get:B})},m.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},m.t=function(n,Q){if(1&Q&&(n=m(n)),8&Q)return n;if(4&Q&&"object"==typeof n&&n&&n.__esModule)return n;var B=Object.create(null);if(m.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:n}),2&Q&&"string"!=typeof n)for(var e in n)m.d(B,e,function(Q){return n[Q]}.bind(null,e));return B},m.n=function(n){var Q=n&&n.__esModule?function(){return n.default}:function(){return n};return m.d(Q,"a",Q),Q},m.o=function(n,Q){return Object.prototype.hasOwnProperty.call(n,Q)},m.p="/static/",m.h=function(){return t},l(0)(m.s=0)}([function(n,Q,B){n.exports=B(1)},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, "World", function() { return /* reexport */ World_World; });\n__webpack_require__.d(__webpack_exports__, "createEntity", function() { return /* reexport */ createEntity; });\n__webpack_require__.d(__webpack_exports__, "createSystem", function() { return /* reexport */ createSystem; });\n\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/rng.js\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nvar getRandomValues = typeof crypto !== \'undefined\' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== \'undefined\' && typeof msCrypto.getRandomValues === \'function\' && msCrypto.getRandomValues.bind(msCrypto);\nvar rnds8 = new Uint8Array(16);\nfunction rng() {\n  if (!getRandomValues) {\n    throw new Error(\'crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported\');\n  }\n\n  return getRandomValues(rnds8);\n}\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/regex.js\n/* harmony default export */ var regex = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/validate.js\n\n\nfunction validate(uuid) {\n  return typeof uuid === \'string\' && regex.test(uuid);\n}\n\n/* harmony default export */ var esm_browser_validate = (validate);\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/stringify.js\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var stringify_i = 0; stringify_i < 256; ++stringify_i) {\n  byteToHex.push((stringify_i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It\'s been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + \'-\' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + \'-\' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + \'-\' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + \'-\' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it\'s likely due to one\n  // of the following:\n  // - One or more input array values don\'t map to a hex octet (leading to\n  // "undefined" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!esm_browser_validate(uuid)) {\n    throw TypeError(\'Stringified UUID is invalid\');\n  }\n\n  return uuid;\n}\n\n/* harmony default export */ var esm_browser_stringify = (stringify);\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/v4.js\n\n\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return esm_browser_stringify(rnds);\n}\n\n/* harmony default export */ var esm_browser_v4 = (v4);\n// CONCATENATED MODULE: ./src/guards.ts\n// export function classIsCompType(cl: any)\nfunction isComponentInstance(Class, comp) {\n  if (!comp) {\n    return false;\n  }\n\n  if (!(comp instanceof Class)) {\n    return false;\n  }\n\n  return true;\n}\nfunction isComponentName(possibleName, entitiesByCTypes) {\n  // string\n  if (typeof possibleName !== \'string\') {\n    return false;\n  }\n\n  for (const a of entitiesByCTypes.keys()) {\n    if (a.includes(possibleName)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n// CONCATENATED MODULE: ./src/ComponentCollection.ts\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n// CT is a Union, like `type = typeof FirstComponent | typeof SecondComponent`.\nclass ComponentCollection_ComponentCollection {\n  constructor() {\n    _defineProperty(this, "components", new Map());\n\n    _defineProperty(this, "add", component => {\n      this.components.set(component.constructor.name, component);\n    });\n\n    _defineProperty(this, "update", (cl, func) => {\n      const c = this.components.get(cl.name);\n\n      if (isComponentInstance(cl, c)) {\n        const updatedComponent = func(c);\n        this.components.set(cl.name, updatedComponent);\n      }\n    });\n\n    _defineProperty(this, "remove", cType => {\n      this.components.delete(cType.name);\n    });\n\n    _defineProperty(this, "get", cl => {\n      const comp = this.components.get(cl.name);\n\n      if (isComponentInstance(cl, comp)) {\n        return comp;\n      } else {\n        throw new Error(`ComponentCollection does not have component of type ${cl.name}`);\n      }\n    });\n\n    _defineProperty(this, "has", cType => {\n      return Array.isArray(cType) ? cType.every(ct => this.components.has(ct.name) === true) : this.components.has(cType.name);\n    });\n\n    _defineProperty(this, "hasByName", cName => {\n      return Array.isArray(cName) ? cName.every(ct => this.components.has(ct) === true) : this.components.has(cName);\n    });\n  }\n\n  /**\n   * Get the component type names that are currently being used in the collection.\n   */\n  get componentTypes() {\n    return [...this.components.keys()];\n  }\n  /**\n   * Get the current number of components that are in the collection.\n   */\n\n\n  get size() {\n    return this.components.size;\n  }\n\n}\n// CONCATENATED MODULE: ./src/Entity.ts\nfunction Entity_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nclass Entity_Entity {\n  constructor(world) {\n    Entity_defineProperty(this, "_id", void 0);\n\n    Entity_defineProperty(this, "_world", void 0);\n\n    this._id = esm_browser_v4();\n    this._world = world;\n    /*\n    Registering with the World.\n    */\n\n    this._world.registerEntity(this);\n  }\n  /**\n   * Add a component to an Entity, doh.\n   */\n\n\n  add(component) {\n    this._world.set(this._id, component);\n\n    return this;\n  }\n  /**\n   * Add a tag to a component\n   */\n\n\n  addTag(tag) {\n    const entitySet = this._world.entitiesByTags.has(tag) ? this._world.entitiesByTags.get(tag) : new Set();\n\n    if (entitySet) {\n      entitySet.add(this._id);\n\n      this._world.entitiesByTags.set(tag, entitySet);\n    }\n\n    return this;\n  }\n  /**\n   * Determines if an entity has a component related to it.\n   */\n\n\n  has(cType) {\n    const cc = this._world.componentCollections.get(this._id) || new ComponentCollection_ComponentCollection();\n    return cc.has(cType);\n  }\n  /**\n   * Check to see if an entity tagged with a given tag.\n   */\n\n\n  hasTag(tag) {\n    if (this._world.entitiesByTags.has(tag)) {\n      const entitySet = this._world.entitiesByTags.get(tag);\n\n      if (entitySet) {\n        return entitySet.has(this._id);\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Get a component that belongs to an entity.\n   */\n\n\n  get(cType) {\n    const cc = this._world.componentCollections.get(this._id) || new ComponentCollection_ComponentCollection();\n    const component = cc.get(cType);\n    return component;\n  }\n  /**\n   * Get all components that have been added to an entity, via a ComponentCollection\n   */\n\n\n  getAll() {\n    return this._world.componentCollections.get(this._id) || new ComponentCollection_ComponentCollection();\n  }\n  /**\n   * Remove a component from an entity.\n   * @param cType A component class, eg MyComponent\n   */\n\n\n  remove(cType) {\n    this._world.remove(this._id, cType);\n\n    return this;\n  }\n  /**\n   * Remove a tag from an entity\n   */\n\n\n  removeTag(tag) {\n    if (this._world.entitiesByTags.has(tag)) {\n      const entitySet = this._world.entitiesByTags.get(tag);\n\n      if (entitySet) {\n        entitySet.delete(this._id);\n\n        if (entitySet.size === 0) {\n          this._world.entitiesByTags.delete(tag);\n        }\n      }\n    }\n\n    return this;\n  }\n  /** Clears all components from an Entity */\n\n\n  clear() {\n    this._world.clearEntityComponents(this._id);\n\n    return this;\n  }\n  /**\n   * Remove all tags on an entity\n   */\n\n\n  clearTags() {\n    for (const [tag, entitySet] of this._world.entitiesByTags.entries()) {\n      entitySet.delete(this._id);\n\n      if (entitySet.size === 0) {\n        this._world.entitiesByTags.delete(tag);\n      }\n    }\n\n    return this;\n  }\n\n  destroy() {\n    this._world.destroyEntity(this._id);\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get world() {\n    return this._world;\n  }\n  /**\n   * Get all components that have been added to an entity, via a ComponentCollection.\n   * Does the same thing as entityInstance.getAll().\n   */\n\n\n  get components() {\n    return this._world.componentCollections.get(this._id) || new ComponentCollection_ComponentCollection();\n  }\n  /**\n   * Retrieves all the tags that have been added to this entity.\n   */\n\n\n  get tags() {\n    const tags = new Set();\n\n    for (const [tag, entitySet] of this._world.entitiesByTags.entries()) {\n      if (entitySet.has(this._id)) {\n        tags.add(tag);\n      }\n    }\n\n    return tags;\n  }\n\n}\nfunction createEntity(world) {\n  const entity = new Entity_Entity(world);\n  return entity;\n}\n// CONCATENATED MODULE: ./src/System.ts\n\n\n\n/**\n * This is how you create a System.\n * @example\n * ```\n * createSystem(world, [\'ComponentType\'], ({ entity }) => \'Do fun system things here.\')\n * ```\n */\nfunction createSystem( // export function createSystem<CT extends CompTypes<CT>>(\nworld, // cTypes: CT[],\ncTypes, systemFunc) {\n  const cNames = cTypes.map(ct => ct.name);\n  world.registerSystem(cNames); // world.registerSystem(cTypes);\n\n  return () => {\n    let index = 0;\n    const size = world.entitiesByCTypes.size; // Used for matching the array of ComponentTypes which is the key\n    // of where the ComponentCollection is, with the array of ComponentTypes\n    // that are passes.\n    // Might be nice in the future to go back to a ref check on cTypes, but\n    // for now this doesn\'t seem to be that much of a perf hit.\n    // for (const ct of world.entitiesByCTypes.keys()) {\n    //   if (cTypes.length === ct.length && cTypes.every(c => ct.includes(c))) {\n    //     for (const eid of world.entitiesByCTypes.get(cTypes)) {\n    //       const args: SystemFuncArgs<CT> = {\n    //         entity: world.entities.get(eid),\n    //         components: world.componentCollections.get(eid),\n    //         world,\n    //         index,\n    //         size,\n    //         isFirst: index === 0,\n    //         isLast: index + 1 === size,\n    //       }\n    //       systemFunc(args);\n    //       index += 1;\n    //     }\n    //   }\n    // }\n\n    const cTypeArrs = world.entitiesByCTypes.get(cNames) || new Set();\n\n    for (const eid of cTypeArrs) {\n      const args = {\n        entity: world.entities.get(eid) || new Entity_Entity(world),\n        components: world.componentCollections.get(eid) || new ComponentCollection_ComponentCollection(),\n        world,\n        index,\n        size,\n        isFirst: index === 0,\n        isLast: index + 1 === size\n      };\n      systemFunc(args);\n      index += 1;\n    }\n  };\n}\n// CONCATENATED MODULE: ./src/World.ts\nfunction World_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nclass World_World {\n  constructor() {\n    World_defineProperty(this, "componentCollections", new Map());\n\n    World_defineProperty(this, "entities", new Map());\n\n    World_defineProperty(this, "entitiesByCTypes", new Map());\n\n    World_defineProperty(this, "entitiesByTags", new Map());\n\n    World_defineProperty(this, "find", predicate => {\n      for (const entity of this.entities.values()) {\n        if (predicate(entity)) {\n          return entity;\n        }\n      }\n\n      return null;\n    });\n\n    World_defineProperty(this, "findAll", predicate => {\n      const results = [];\n\n      for (const entity of this.entities.values()) {\n        if (predicate(entity)) {\n          results.push(entity);\n        }\n      }\n\n      return results;\n    });\n\n    World_defineProperty(this, "locate", cl => {\n      for (const entity of this.entities.values()) {\n        // console.log("entity?", entity.components, cl.name);\n        if (entity.components.has(cl)) {\n          return entity;\n        }\n      }\n\n      return null;\n    });\n\n    World_defineProperty(this, "locateAll", cl => {\n      const results = [];\n\n      for (const entity of this.entities.values()) {\n        if (entity.components.has(cl)) {\n          results.push(entity);\n        }\n      }\n\n      return results;\n    });\n\n    World_defineProperty(this, "grab", cl => {\n      // const entity = this.locate((cl as unknown) as CT[keyof CT]);\n      const entity = this.locate(cl);\n\n      if (entity) {\n        const cc = this.componentCollections.get(entity.id) || new ComponentCollection_ComponentCollection();\n        const component = cc.get(cl);\n        return {\n          entity,\n          component\n        };\n      }\n\n      return null;\n    });\n\n    World_defineProperty(this, "grabBy", (cl, predicate) => {\n      const entities = this.locateAll(cl);\n\n      for (const entity of entities) {\n        const cc = this.componentCollections.get(entity.id) || new ComponentCollection_ComponentCollection();\n        const component = cc.get(cl);\n\n        if (predicate(component)) {\n          return {\n            component,\n            entity\n          };\n        }\n      }\n\n      return null;\n    });\n\n    World_defineProperty(this, "grabAll", cl => {\n      const entities = this.locateAll(cl);\n      return entities.map(entity => {\n        return {\n          entity,\n          component: entity.components.get(cl)\n        };\n      });\n    });\n\n    World_defineProperty(this, "get", (eid, cl) => {\n      const cc = this.componentCollections.get(eid) || new ComponentCollection_ComponentCollection();\n      return cc.get(cl);\n    });\n\n    World_defineProperty(this, "getTagged", tag => {\n      const tagEntityIds = this.entitiesByTags.get(tag);\n\n      if (tagEntityIds) {\n        const entityId = tagEntityIds.values().next().value;\n        const entity = this.entities.get(entityId);\n\n        if (entity) {\n          return entity;\n        }\n      }\n\n      return null;\n    });\n\n    World_defineProperty(this, "getAllTagged", tag => {\n      let entities = []; // eslint-disable-line\n\n      const tagEntityIds = this.entitiesByTags.get(tag);\n\n      if (tagEntityIds) {\n        for (const entityId of tagEntityIds) {\n          const entity = this.entities.get(entityId);\n\n          if (entity) {\n            entities.push(entity);\n          }\n        }\n      }\n\n      return entities;\n    });\n\n    World_defineProperty(this, "set", (eid, component) => {\n      const cc = this.componentCollections.get(eid) || new ComponentCollection_ComponentCollection();\n      cc.add(component);\n      this.componentCollections.set(eid, cc);\n\n      for (const [ctArr, entitySet] of this.entitiesByCTypes) {\n        if (ctArr.every(cc.hasByName)) {\n          entitySet.add(eid);\n        }\n      }\n\n      return this;\n    });\n\n    World_defineProperty(this, "remove", (eid, cType) => {\n      const cc = this.componentCollections.get(eid) || new ComponentCollection_ComponentCollection(); // remove entity from current entitiesByCTypes\n\n      for (const [ctArr, entitySet] of this.entitiesByCTypes) {\n        if (ctArr.every(cc.hasByName)) {\n          entitySet.delete(eid);\n        }\n      }\n\n      cc.remove(cType); // Move entityId to new CTypes if needed.\n\n      for (const [ctArr, entitySet] of this.entitiesByCTypes) {\n        if (ctArr.every(cc.hasByName)) {\n          entitySet.add(eid);\n        }\n      }\n\n      return this;\n    });\n  }\n\n  /**\n   * Internal method used in setting up a new system.\n   */\n  registerSystem(cNames) {\n    this.entitiesByCTypes.set(cNames, new Set());\n    return this;\n  }\n  /**\n   * an alias for createSystem().\n   */\n\n\n  createSystem(cl, systemFunc) {\n    const system = createSystem(this, cl, systemFunc);\n    return system;\n  }\n\n  registerEntity(entity) {\n    const cc = new ComponentCollection_ComponentCollection();\n    this.componentCollections.set(entity.id, cc);\n    this.entities.set(entity.id, entity);\n    return this;\n  }\n  /**\n   * Remove all components that belong to an entity.\n   */\n\n\n  clearEntityComponents(eid) {\n    this.componentCollections.set(eid, new ComponentCollection_ComponentCollection());\n\n    for (const entitySet of this.entitiesByCTypes.values()) {\n      if (entitySet.has(eid)) {\n        entitySet.delete(eid);\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Create an entity that is in the world.\n   * Basically just new Entity(world), but saves an import of Entity.\n   */\n\n\n  createEntity() {\n    const entity = new Entity_Entity(this);\n    return entity;\n  }\n  /**\n   * Destroys an entity.\n   * Same as entity.destroy().\n   */\n\n\n  destroyEntity(eid) {\n    this.componentCollections.delete(eid);\n    this.entities.delete(eid);\n\n    for (const entitySet of this.entitiesByCTypes.values()) {\n      if (entitySet.has(eid)) {\n        entitySet.delete(eid);\n      }\n    } // remove any tag associations with destroyed entities.\n\n\n    for (const [tag, entitySet] of this.entitiesByTags) {\n      if (entitySet.has(eid)) {\n        entitySet.delete(eid);\n      }\n\n      if (entitySet.size === 0) {\n        this.entitiesByTags.delete(tag);\n      }\n    }\n\n    return this;\n  }\n\n}\n// CONCATENATED MODULE: ./src/index.ts\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY3N0YXRpYy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcm5nLmpzP2Q4ZjgiLCJ3ZWJwYWNrOi8vZWNzdGF0aWMvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3JlZ2V4LmpzPzQwZDYiLCJ3ZWJwYWNrOi8vZWNzdGF0aWMvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3ZhbGlkYXRlLmpzPzA2ZTQiLCJ3ZWJwYWNrOi8vZWNzdGF0aWMvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3N0cmluZ2lmeS5qcz81OGNmIiwid2VicGFjazovL2Vjc3RhdGljLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92NC5qcz9lYzI2Iiwid2VicGFjazovL2Vjc3RhdGljLy4vc3JjL2d1YXJkcy50cz8zYjU3Iiwid2VicGFjazovL2Vjc3RhdGljLy4vc3JjL0NvbXBvbmVudENvbGxlY3Rpb24udHM/NTFjNCIsIndlYnBhY2s6Ly9lY3N0YXRpYy8uL3NyYy9FbnRpdHkudHM/YWM2OCIsIndlYnBhY2s6Ly9lY3N0YXRpYy8uL3NyYy9TeXN0ZW0udHM/MzI0OCIsIndlYnBhY2s6Ly9lY3N0YXRpYy8uL3NyYy9Xb3JsZC50cz9jYzBiIiwid2VicGFjazovL2Vjc3RhdGljLy4vc3JjL2luZGV4LnRzP2ZmYjQiXSwibmFtZXMiOlsiaXNDb21wb25lbnRJbnN0YW5jZSIsIkNsYXNzIiwiY29tcCIsImlzQ29tcG9uZW50TmFtZSIsInBvc3NpYmxlTmFtZSIsImVudGl0aWVzQnlDVHlwZXMiLCJhIiwia2V5cyIsImluY2x1ZGVzIiwiQ29tcG9uZW50Q29sbGVjdGlvbiIsIk1hcCIsImNvbXBvbmVudCIsImNvbXBvbmVudHMiLCJzZXQiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJjbCIsImZ1bmMiLCJjIiwiZ2V0IiwidXBkYXRlZENvbXBvbmVudCIsImNUeXBlIiwiZGVsZXRlIiwiRXJyb3IiLCJBcnJheSIsImlzQXJyYXkiLCJldmVyeSIsImN0IiwiaGFzIiwiY05hbWUiLCJjb21wb25lbnRUeXBlcyIsInNpemUiLCJFbnRpdHkiLCJ3b3JsZCIsIl9pZCIsInV1aWR2NCIsIl93b3JsZCIsInJlZ2lzdGVyRW50aXR5IiwiYWRkIiwiYWRkVGFnIiwidGFnIiwiZW50aXR5U2V0IiwiZW50aXRpZXNCeVRhZ3MiLCJTZXQiLCJjYyIsImNvbXBvbmVudENvbGxlY3Rpb25zIiwiaGFzVGFnIiwiZ2V0QWxsIiwicmVtb3ZlIiwicmVtb3ZlVGFnIiwiY2xlYXIiLCJjbGVhckVudGl0eUNvbXBvbmVudHMiLCJjbGVhclRhZ3MiLCJlbnRyaWVzIiwiZGVzdHJveSIsImRlc3Ryb3lFbnRpdHkiLCJpZCIsInRhZ3MiLCJjcmVhdGVFbnRpdHkiLCJlbnRpdHkiLCJjcmVhdGVTeXN0ZW0iLCJjVHlwZXMiLCJzeXN0ZW1GdW5jIiwiY05hbWVzIiwibWFwIiwicmVnaXN0ZXJTeXN0ZW0iLCJpbmRleCIsImNUeXBlQXJycyIsImVpZCIsImFyZ3MiLCJlbnRpdGllcyIsImlzRmlyc3QiLCJpc0xhc3QiLCJXb3JsZCIsInByZWRpY2F0ZSIsInZhbHVlcyIsInJlc3VsdHMiLCJwdXNoIiwibG9jYXRlIiwibG9jYXRlQWxsIiwidGFnRW50aXR5SWRzIiwiZW50aXR5SWQiLCJuZXh0IiwidmFsdWUiLCJjdEFyciIsImhhc0J5TmFtZSIsInN5c3RlbSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZTtBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEM7O0FDYmUsd0RBQWMsRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFFLFVBQVUsR0FBRyx5Q0FBeUMsRTs7QUNBckc7O0FBRS9CO0FBQ0EscUNBQXFDLEtBQUs7QUFDMUM7O0FBRWUsaUVBQVEsRTs7QUNOYztBQUNyQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxT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LFNBQVMsQ0FBQ1YsSUFBVixLQUFtQixDQUF2QixFQUEwQjtBQUN4QixhQUFLVyxjQUFMLENBQW9CcEIsTUFBcEIsQ0FBMkJrQixHQUEzQjtBQUNEO0FBQ0Y7O0FBRUQsV0FBTyxJQUFQO0FBQ0Q7O0FBOVQrQyxDOztBQ1BsRDtBQUNBO0FBQ0EiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFVuaXF1ZSBJRCBjcmVhdGlvbiByZXF1aXJlcyBhIGhpZ2ggcXVhbGl0eSByYW5kb20gIyBnZW5lcmF0b3IuIEluIHRoZSBicm93c2VyIHdlIHRoZXJlZm9yZVxuLy8gcmVxdWlyZSB0aGUgY3J5cHRvIEFQSSBhbmQgZG8gbm90IHN1cHBvcnQgYnVpbHQtaW4gZmFsbGJhY2sgdG8gbG93ZXIgcXVhbGl0eSByYW5kb20gbnVtYmVyXG4vLyBnZW5lcmF0b3JzIChsaWtlIE1hdGgucmFuZG9tKCkpLlxuLy8gZ2V0UmFuZG9tVmFsdWVzIG5lZWRzIHRvIGJlIGludm9rZWQgaW4gYSBjb250ZXh0IHdoZXJlIFwidGhpc1wiIGlzIGEgQ3J5cHRvIGltcGxlbWVudGF0aW9uLiBBbHNvLFxuLy8gZmluZCB0aGUgY29tcGxldGUgaW1wbGVtZW50YXRpb24gb2YgY3J5cHRvIChtc0NyeXB0bykgb24gSUUxMS5cbnZhciBnZXRSYW5kb21WYWx1ZXMgPSB0eXBlb2YgY3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChjcnlwdG8pIHx8IHR5cGVvZiBtc0NyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcyA9PT0gJ2Z1bmN0aW9uJyAmJiBtc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChtc0NyeXB0byk7XG52YXIgcm5kczggPSBuZXcgVWludDhBcnJheSgxNik7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBybmcoKSB7XG4gIGlmICghZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKCkgbm90IHN1cHBvcnRlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZCNnZXRyYW5kb212YWx1ZXMtbm90LXN1cHBvcnRlZCcpO1xuICB9XG5cbiAgcmV0dXJuIGdldFJhbmRvbVZhbHVlcyhybmRzOCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgL14oPzpbMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMS01XVswLTlhLWZdezN9LVs4OWFiXVswLTlhLWZdezN9LVswLTlhLWZdezEyfXwwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDApJC9pOyIsImltcG9ydCBSRUdFWCBmcm9tICcuL3JlZ2V4LmpzJztcblxuZnVuY3Rpb24gdmFsaWRhdGUodXVpZCkge1xuICByZXR1cm4gdHlwZW9mIHV1aWQgPT09ICdzdHJpbmcnICYmIFJFR0VYLnRlc3QodXVpZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbGlkYXRlOyIsImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcbi8qKlxuICogQ29udmVydCBhcnJheSBvZiAxNiBieXRlIHZhbHVlcyB0byBVVUlEIHN0cmluZyBmb3JtYXQgb2YgdGhlIGZvcm06XG4gKiBYWFhYWFhYWC1YWFhYLVhYWFgtWFhYWC1YWFhYWFhYWFhYWFhcbiAqL1xuXG52YXIgYnl0ZVRvSGV4ID0gW107XG5cbmZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgYnl0ZVRvSGV4LnB1c2goKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnN1YnN0cigxKSk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShhcnIpIHtcbiAgdmFyIG9mZnNldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgLy8gTm90ZTogQmUgY2FyZWZ1bCBlZGl0aW5nIHRoaXMgY29kZSEgIEl0J3MgYmVlbiB0dW5lZCBmb3IgcGVyZm9ybWFuY2VcbiAgLy8gYW5kIHdvcmtzIGluIHdheXMgeW91IG1heSBub3QgZXhwZWN0LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkL3B1bGwvNDM0XG4gIHZhciB1dWlkID0gKGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgM11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDVdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA3XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDhdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxM11dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNV1dKS50b0xvd2VyQ2FzZSgpOyAvLyBDb25zaXN0ZW5jeSBjaGVjayBmb3IgdmFsaWQgVVVJRC4gIElmIHRoaXMgdGhyb3dzLCBpdCdzIGxpa2VseSBkdWUgdG8gb25lXG4gIC8vIG9mIHRoZSBmb2xsb3dpbmc6XG4gIC8vIC0gT25lIG9yIG1vcmUgaW5wdXQgYXJyYXkgdmFsdWVzIGRvbid0IG1hcCB0byBhIGhleCBvY3RldCAobGVhZGluZyB0b1xuICAvLyBcInVuZGVmaW5lZFwiIGluIHRoZSB1dWlkKVxuICAvLyAtIEludmFsaWQgaW5wdXQgdmFsdWVzIGZvciB0aGUgUkZDIGB2ZXJzaW9uYCBvciBgdmFyaWFudGAgZmllbGRzXG5cbiAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignU3RyaW5naWZpZWQgVVVJRCBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICByZXR1cm4gdXVpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RyaW5naWZ5OyIsImltcG9ydCBybmcgZnJvbSAnLi9ybmcuanMnO1xuaW1wb3J0IHN0cmluZ2lmeSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5cbmZ1bmN0aW9uIHY0KG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgcm5kcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBybmcpKCk7IC8vIFBlciA0LjQsIHNldCBiaXRzIGZvciB2ZXJzaW9uIGFuZCBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGBcblxuICBybmRzWzZdID0gcm5kc1s2XSAmIDB4MGYgfCAweDQwO1xuICBybmRzWzhdID0gcm5kc1s4XSAmIDB4M2YgfCAweDgwOyAvLyBDb3B5IGJ5dGVzIHRvIGJ1ZmZlciwgaWYgcHJvdmlkZWRcblxuICBpZiAoYnVmKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHJuZHNbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1ZjtcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdpZnkocm5kcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHY0OyIsImltcG9ydCBFbnRpdHksIHsgRW50aXR5SWQgfSBmcm9tIFwiLi9FbnRpdHlcIjtcbmltcG9ydCB7IENvbXBUeXBlcyB9IGZyb20gJ2ludGVyZmFjZXMnO1xuaW1wb3J0IENvbXBvbmVudENvbGxlY3Rpb24gZnJvbSAnLi9Db21wb25lbnRDb2xsZWN0aW9uJztcblxuLy8gZXhwb3J0IGZ1bmN0aW9uIGNsYXNzSXNDb21wVHlwZShjbDogYW55KVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDb21wb25lbnRJbnN0YW5jZTxUPihcbiAgQ2xhc3M6IG5ldyAoLi4uYXJnczogYW55KSA9PiBULFxuICBjb21wOiBhbnlcbik6IGNvbXAgaXMgSW5zdGFuY2VUeXBlPHR5cGVvZiBDbGFzcz4ge1xuICBpZiAoIWNvbXApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoIShjb21wIGluc3RhbmNlb2YgQ2xhc3MpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ29tcG9uZW50TmFtZTxDVCBleHRlbmRzIENvbXBUeXBlczxDVD4+KFxuICBwb3NzaWJsZU5hbWU6IGFueSxcbiAgZW50aXRpZXNCeUNUeXBlczogTWFwPChrZXlvZiBDVClbXSwgU2V0PEVudGl0eUlkPj5cbik6IHBvc3NpYmxlTmFtZSBpcyBDVFtrZXlvZiBDVF0ge1xuICAvLyBzdHJpbmdcbiAgaWYgKHR5cGVvZiBwb3NzaWJsZU5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yIChjb25zdCBhIG9mIGVudGl0aWVzQnlDVHlwZXMua2V5cygpKSB7XG4gICAgaWYgKGEuaW5jbHVkZXMocG9zc2libGVOYW1lKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuIiwiaW1wb3J0IHsgaXNDb21wb25lbnRJbnN0YW5jZSB9IGZyb20gXCIuL2d1YXJkc1wiO1xuXG50eXBlIENsYXNzPFQ+ID0geyBuZXcgKC4uLmFyZ3M6IGFueVtdKTogVCB9O1xuXG4vLyBDVCBpcyBhIFVuaW9uLCBsaWtlIGB0eXBlID0gdHlwZW9mIEZpcnN0Q29tcG9uZW50IHwgdHlwZW9mIFNlY29uZENvbXBvbmVudGAuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21wb25lbnRDb2xsZWN0aW9uPENUIGV4dGVuZHMgQ2xhc3M8YW55Pj4ge1xuICBjb21wb25lbnRzOiBNYXA8c3RyaW5nLCBJbnN0YW5jZVR5cGU8Q1Q+PiA9IG5ldyBNYXAoKTtcblxuICAvLyBpbnN0YW5jZSBvZiBhIGNvbXBvbmVudFxuICAvLyBhZGQgPSAoY29tcG9uZW50OiBJbnN0YW5jZVR5cGU8Q1Rba2V5b2YgQ1RdPik6IHZvaWQgPT4ge1xuICBhZGQgPSAoY29tcG9uZW50OiBJbnN0YW5jZVR5cGU8Q1Q+KTogdm9pZCA9PiB7XG4gICAgdGhpcy5jb21wb25lbnRzLnNldChjb21wb25lbnQuY29uc3RydWN0b3IubmFtZSwgY29tcG9uZW50KTtcbiAgfTtcblxuICB1cGRhdGUgPSA8VD4oXG4gICAgY2w6IENsYXNzPFQ+LFxuICAgIGZ1bmM6IChjOiBJbnN0YW5jZVR5cGU8dHlwZW9mIGNsPikgPT4gSW5zdGFuY2VUeXBlPHR5cGVvZiBjbD5cbiAgKTogdm9pZCA9PiB7XG4gICAgY29uc3QgYyA9IHRoaXMuY29tcG9uZW50cy5nZXQoY2wubmFtZSk7XG5cbiAgICBpZiAoaXNDb21wb25lbnRJbnN0YW5jZShjbCwgYykpIHtcbiAgICAgIGNvbnN0IHVwZGF0ZWRDb21wb25lbnQgPSBmdW5jKGMpO1xuICAgICAgdGhpcy5jb21wb25lbnRzLnNldChjbC5uYW1lLCB1cGRhdGVkQ29tcG9uZW50IGFzIEluc3RhbmNlVHlwZTxDVD4pO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogUmVtb3ZlIGEgY29tcG9uZW50LlxuICAgKiBAcGFyYW0gY1R5cGUgQ2xhc3Mgb2YgY29tcG9uZW50IHRvIHJlbW92ZS5cbiAgICovXG4gIHJlbW92ZSA9IChjVHlwZTogQ1QpOiB2b2lkID0+IHtcbiAgICB0aGlzLmNvbXBvbmVudHMuZGVsZXRlKGNUeXBlLm5hbWUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQgYSBjb21wb25lbnQgdGhhdCBtYXRjaGVzIHRoZSBwYXNzZWQgY2xhc3MuXG4gICAqIFdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgYW4gaW5zdGFuY2Ugb2YgdGhlIGdpdmVuIGNvbXBvbmVudFxuICAgKiBkb2Vzbid0IGV4aXN0IGluIHRoZSBjb2xsZWN0aW9uLCBzbyBpZiB5b3UgZG9uJ3Qga25vdyBpZiBpdCdzIHNhZmVcbiAgICogdG8gZ2V0IGEgY29tcG9uZW50LCB5b3Ugc2hvdWxkIHRlc3Qgd2l0aCBoYXMoKSBvciBoYXNCeU5hbWUoKSBmaXJzdC5cbiAgICogWW91IGhhdmUgYmVlbiB3YXJuZWQuXG4gICAqIEBwYXJhbSBjbCBjb21wb25lbnQgQ2xhc3MgcmVmZXJlbmNlLlxuICAgKi9cbiAgZ2V0ID0gPFQ+KGNsOiBDbGFzczxUPik6IEluc3RhbmNlVHlwZTx0eXBlb2YgY2w+ID0+IHtcbiAgICBjb25zdCBjb21wID0gdGhpcy5jb21wb25lbnRzLmdldChjbC5uYW1lKTtcblxuICAgIGlmIChpc0NvbXBvbmVudEluc3RhbmNlPFQ+KGNsLCBjb21wKSkge1xuICAgICAgcmV0dXJuIGNvbXA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYENvbXBvbmVudENvbGxlY3Rpb24gZG9lcyBub3QgaGF2ZSBjb21wb25lbnQgb2YgdHlwZSAke2NsLm5hbWV9YFxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gUG9zc2libGUgb3RoZXIgd2F5IHRvIHdyaXRlIGEgZ2V0IG1ldGhvZCB0aGF0IG1haW50YWlucyB0aGUgdHlwZSBvZiB0aGVcbiAgLy8gQ29tcG9uZW50IHRocm91Z2hvdXQuIEtlZXBpbmcgYXJvdW5kIGZvciBub3cgYXJlIGEgcmVmZXJlbmNlLlxuICAvLyBnZXQ8VSBleHRlbmRzIENUPihjb21wQ2xhc3M6IENsYXNzPFU+KTogVSB7XG4gIC8vICAgaWYgKCF0aGlzLmNvbXBvbmVudHMuaGFzKGNvbXBDbGFzcy5uYW1lKSkge1xuICAvLyAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAvLyAgICAgICBgQ29tcG9uZW50Q29sbGVjdGlvbiBkb2VzIG5vdCBoYXZlIGNvbXBvbmVudCBvZiB0eXBlICR7Y29tcENsYXNzLm5hbWV9YFxuICAvLyAgICAgKTtcbiAgLy8gICB9XG5cbiAgLy8gICByZXR1cm4gdGhpcy5jb21wb25lbnRzLmdldChjb21wQ2xhc3MubmFtZSkhIGFzIHVua25vd24gYXMgVTtcbiAgLy8gfVxuXG4gIC8qKlxuICAgKiBUZXN0IHRvIHNlZSBpZiB0aGUgY29sbGVjdGlvbiBjb250YWlucyBhIHNwZWNpZmljIENsYXNzIG9yIENsYXNzZXMuXG4gICAqIEBwYXJhbSBjVHlwZSBjb21wb25lbnQgQ2xhc3MsIG9yIGFycmF5IG9mIGNvbXBvbmVudCBDbGFzc2VzLlxuICAgKi9cbiAgaGFzID0gKGNUeXBlOiBDVCB8IENUW10pOiBib29sZWFuID0+IHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShjVHlwZSlcbiAgICAgID8gY1R5cGUuZXZlcnkoKGN0KSA9PiB0aGlzLmNvbXBvbmVudHMuaGFzKGN0Lm5hbWUpID09PSB0cnVlKVxuICAgICAgOiB0aGlzLmNvbXBvbmVudHMuaGFzKGNUeXBlLm5hbWUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBUZXN0IHRvIHNlZSBpZiB0aGUgY29sbGVjdGlvbiBoYXMgYSBjb21wb25lbnQgaW5zdGFuY2UgYmFzZWQgb24gYVxuICAgKiBjbGFzcyBuYW1lLiBTb21lIGJ1aWxkIHN0ZXBzL21pbmlmaWVycyB3aWxsIGNoYW5nZSB0aGUgbmFtZSBvZiBDbGFzc2VzLFxuICAgKiBzbyBpdCdzIHVzdWFsbHkgYmVzdCB0byBwYXNzIGluIGEgTXlDbGFzcy5uYW1lIGluc3RlYWQgb2YgJ015Q2xhc3MnLlxuICAgKiBAcGFyYW0gY05hbWUgVGhlIG5hbWUgb2YgYSBDbGFzcywgb3IgYXJyYXkgb2YgQ2xhc3MgbmFtZXMuXG4gICAqL1xuICBoYXNCeU5hbWUgPSAoY05hbWU6IHN0cmluZyB8IHN0cmluZ1tdKTogYm9vbGVhbiA9PiB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoY05hbWUpXG4gICAgICA/IGNOYW1lLmV2ZXJ5KGN0ID0+IHRoaXMuY29tcG9uZW50cy5oYXMoY3QpID09PSB0cnVlKVxuICAgICAgOiB0aGlzLmNvbXBvbmVudHMuaGFzKGNOYW1lKTtcbiAgfTtcblxuICAvKipcbiAgICogR2V0IHRoZSBjb21wb25lbnQgdHlwZSBuYW1lcyB0aGF0IGFyZSBjdXJyZW50bHkgYmVpbmcgdXNlZCBpbiB0aGUgY29sbGVjdGlvbi5cbiAgICovXG4gIGdldCBjb21wb25lbnRUeXBlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFsuLi50aGlzLmNvbXBvbmVudHMua2V5cygpXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGN1cnJlbnQgbnVtYmVyIG9mIGNvbXBvbmVudHMgdGhhdCBhcmUgaW4gdGhlIGNvbGxlY3Rpb24uXG4gICAqL1xuICBnZXQgc2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmNvbXBvbmVudHMuc2l6ZTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSAndXVpZCc7XG5pbXBvcnQgV29ybGQgZnJvbSAnLi9Xb3JsZCc7XG5pbXBvcnQgQ29tcG9uZW50Q29sbGVjdGlvbiBmcm9tICcuL0NvbXBvbmVudENvbGxlY3Rpb24nO1xuaW1wb3J0IHsgVGFnIH0gZnJvbSAnLi9UYWcnO1xuaW1wb3J0IHsgQ29tcFR5cGVzIH0gZnJvbSAnaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCB0eXBlIEVudGl0eUlkID0gc3RyaW5nO1xuXG50eXBlIENsYXNzPFQ+ID0geyBuZXcgKC4uLmFyZ3M6IGFueVtdKTogVCB9O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbnRpdHk8Q1QgZXh0ZW5kcyBDbGFzczxhbnk+PiB7XG4gIHByaXZhdGUgX2lkOiBzdHJpbmc7XG4gIHByaXZhdGUgX3dvcmxkOiBXb3JsZDxDVD47XG5cbiAgY29uc3RydWN0b3Iod29ybGQ6IFdvcmxkPENUPikge1xuICAgIHRoaXMuX2lkID0gdXVpZHY0KCk7XG4gICAgdGhpcy5fd29ybGQgPSB3b3JsZDtcblxuICAgIC8qXG4gICAgUmVnaXN0ZXJpbmcgd2l0aCB0aGUgV29ybGQuXG4gICAgKi9cbiAgICB0aGlzLl93b3JsZC5yZWdpc3RlckVudGl0eSh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBjb21wb25lbnQgdG8gYW4gRW50aXR5LCBkb2guXG4gICAqL1xuICBhZGQoY29tcG9uZW50OiBJbnN0YW5jZVR5cGU8Q1Q+KTogdGhpcyB7XG4gICAgdGhpcy5fd29ybGQuc2V0KHRoaXMuX2lkLCBjb21wb25lbnQpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgdGFnIHRvIGEgY29tcG9uZW50XG4gICAqL1xuICBhZGRUYWcodGFnOiBUYWcpOiB0aGlzIHtcbiAgICBjb25zdCBlbnRpdHlTZXQgPSB0aGlzLl93b3JsZC5lbnRpdGllc0J5VGFncy5oYXModGFnKVxuICAgICAgPyB0aGlzLl93b3JsZC5lbnRpdGllc0J5VGFncy5nZXQodGFnKVxuICAgICAgOiBuZXcgU2V0PEVudGl0eUlkPigpO1xuXG4gICAgaWYgKGVudGl0eVNldCkge1xuICAgICAgZW50aXR5U2V0LmFkZCh0aGlzLl9pZCk7XG4gICAgICB0aGlzLl93b3JsZC5lbnRpdGllc0J5VGFncy5zZXQodGFnLCBlbnRpdHlTZXQpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgYW4gZW50aXR5IGhhcyBhIGNvbXBvbmVudCByZWxhdGVkIHRvIGl0LlxuICAgKi9cbiAgaGFzKGNUeXBlOiBDVCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGNjID0gdGhpcy5fd29ybGQuY29tcG9uZW50Q29sbGVjdGlvbnMuZ2V0KHRoaXMuX2lkKSB8fCBuZXcgQ29tcG9uZW50Q29sbGVjdGlvbjxDVD4oKTtcblxuICAgIHJldHVybiBjYy5oYXMoY1R5cGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHRvIHNlZSBpZiBhbiBlbnRpdHkgdGFnZ2VkIHdpdGggYSBnaXZlbiB0YWcuXG4gICAqL1xuICBoYXNUYWcodGFnOiBUYWcpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5fd29ybGQuZW50aXRpZXNCeVRhZ3MuaGFzKHRhZykpIHtcbiAgICAgIGNvbnN0IGVudGl0eVNldCA9IHRoaXMuX3dvcmxkLmVudGl0aWVzQnlUYWdzLmdldCh0YWcpO1xuICAgICAgaWYgKGVudGl0eVNldCkge1xuICAgICAgICByZXR1cm4gZW50aXR5U2V0Lmhhcyh0aGlzLl9pZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIGNvbXBvbmVudCB0aGF0IGJlbG9uZ3MgdG8gYW4gZW50aXR5LlxuICAgKi9cbiAgZ2V0KGNUeXBlOiBDVCk6IENUIHtcbiAgICBjb25zdCBjYyA9IHRoaXMuX3dvcmxkLmNvbXBvbmVudENvbGxlY3Rpb25zLmdldCh0aGlzLl9pZCkgfHwgbmV3IENvbXBvbmVudENvbGxlY3Rpb248Q1Q+KCk7XG5cbiAgICBjb25zdCBjb21wb25lbnQgPSBjYy5nZXQoY1R5cGUpO1xuXG4gICAgcmV0dXJuIGNvbXBvbmVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYWxsIGNvbXBvbmVudHMgdGhhdCBoYXZlIGJlZW4gYWRkZWQgdG8gYW4gZW50aXR5LCB2aWEgYSBDb21wb25lbnRDb2xsZWN0aW9uXG4gICAqL1xuICBnZXRBbGwoKTogQ29tcG9uZW50Q29sbGVjdGlvbjxDVD4ge1xuICAgIHJldHVybiB0aGlzLl93b3JsZC5jb21wb25lbnRDb2xsZWN0aW9ucy5nZXQodGhpcy5faWQpIHx8IG5ldyBDb21wb25lbnRDb2xsZWN0aW9uPENUPigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhIGNvbXBvbmVudCBmcm9tIGFuIGVudGl0eS5cbiAgICogQHBhcmFtIGNUeXBlIEEgY29tcG9uZW50IGNsYXNzLCBlZyBNeUNvbXBvbmVudFxuICAgKi9cbiAgcmVtb3ZlKGNUeXBlOiBDVCk6IHRoaXMge1xuICAgIHRoaXMuX3dvcmxkLnJlbW92ZSh0aGlzLl9pZCwgY1R5cGUpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGEgdGFnIGZyb20gYW4gZW50aXR5XG4gICAqL1xuICByZW1vdmVUYWcodGFnOiBUYWcpOiB0aGlzIHtcbiAgICBpZiAodGhpcy5fd29ybGQuZW50aXRpZXNCeVRhZ3MuaGFzKHRhZykpIHtcbiAgICAgIGNvbnN0IGVudGl0eVNldCA9IHRoaXMuX3dvcmxkLmVudGl0aWVzQnlUYWdzLmdldCh0YWcpO1xuICAgICAgXG4gICAgICBpZiAoZW50aXR5U2V0KSB7XG4gICAgICAgIGVudGl0eVNldC5kZWxldGUodGhpcy5faWQpO1xuXG4gICAgICAgIGlmIChlbnRpdHlTZXQuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX3dvcmxkLmVudGl0aWVzQnlUYWdzLmRlbGV0ZSh0YWcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqIENsZWFycyBhbGwgY29tcG9uZW50cyBmcm9tIGFuIEVudGl0eSAqL1xuICBjbGVhcigpOiB0aGlzIHtcbiAgICB0aGlzLl93b3JsZC5jbGVhckVudGl0eUNvbXBvbmVudHModGhpcy5faWQpO1xuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYWxsIHRhZ3Mgb24gYW4gZW50aXR5XG4gICAqL1xuICBjbGVhclRhZ3MoKTogdGhpcyB7XG4gICAgZm9yIChjb25zdCBbdGFnLCBlbnRpdHlTZXRdIG9mIHRoaXMuX3dvcmxkLmVudGl0aWVzQnlUYWdzLmVudHJpZXMoKSkge1xuICAgICAgZW50aXR5U2V0LmRlbGV0ZSh0aGlzLl9pZCk7XG5cbiAgICAgIGlmIChlbnRpdHlTZXQuc2l6ZSA9PT0gMCkge1xuICAgICAgICB0aGlzLl93b3JsZC5lbnRpdGllc0J5VGFncy5kZWxldGUodGFnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5fd29ybGQuZGVzdHJveUVudGl0eSh0aGlzLl9pZCk7XG4gIH1cblxuICBnZXQgaWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5faWQ7XG4gIH1cblxuICBnZXQgd29ybGQoKTogV29ybGQ8Q1Q+IHtcbiAgICByZXR1cm4gdGhpcy5fd29ybGQ7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFsbCBjb21wb25lbnRzIHRoYXQgaGF2ZSBiZWVuIGFkZGVkIHRvIGFuIGVudGl0eSwgdmlhIGEgQ29tcG9uZW50Q29sbGVjdGlvbi5cbiAgICogRG9lcyB0aGUgc2FtZSB0aGluZyBhcyBlbnRpdHlJbnN0YW5jZS5nZXRBbGwoKS5cbiAgICovXG4gIGdldCBjb21wb25lbnRzKCk6IENvbXBvbmVudENvbGxlY3Rpb248Q1Q+IHtcbiAgICByZXR1cm4gdGhpcy5fd29ybGQuY29tcG9uZW50Q29sbGVjdGlvbnMuZ2V0KHRoaXMuX2lkKSB8fCBuZXcgQ29tcG9uZW50Q29sbGVjdGlvbjxDVD4oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgYWxsIHRoZSB0YWdzIHRoYXQgaGF2ZSBiZWVuIGFkZGVkIHRvIHRoaXMgZW50aXR5LlxuICAgKi9cbiAgZ2V0IHRhZ3MoKTogU2V0PFRhZz4ge1xuICAgIGNvbnN0IHRhZ3MgPSBuZXcgU2V0PFRhZz4oKTtcbiAgICBmb3IgKGNvbnN0IFt0YWcsIGVudGl0eVNldF0gb2YgdGhpcy5fd29ybGQuZW50aXRpZXNCeVRhZ3MuZW50cmllcygpKSB7XG4gICAgICBpZiAoZW50aXR5U2V0Lmhhcyh0aGlzLl9pZCkpIHtcbiAgICAgICAgdGFncy5hZGQodGFnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFncztcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRW50aXR5PENUIGV4dGVuZHMgQ2xhc3M8YW55Pj4oXG4gIHdvcmxkOiBXb3JsZDxDVD4sXG4pOiBFbnRpdHk8Q1Q+IHtcbiAgY29uc3QgZW50aXR5ID0gbmV3IEVudGl0eTxDVD4od29ybGQpO1xuXG4gIHJldHVybiBlbnRpdHk7XG59XG5cblxuIiwiaW1wb3J0IFdvcmxkIGZyb20gJy4vV29ybGQnO1xuaW1wb3J0IEVudGl0eSBmcm9tICcuL0VudGl0eSc7XG5pbXBvcnQgQ29tcG9uZW50Q29sbGVjdGlvbiBmcm9tICcuL0NvbXBvbmVudENvbGxlY3Rpb24nO1xuXG50eXBlIENsYXNzPFQ+ID0geyBuZXcgKC4uLmFyZ3M6IGFueVtdKTogVCB9O1xuXG5leHBvcnQgdHlwZSBTeXN0ZW0gPSAoKSA9PiB2b2lkO1xuXG4vKipcbiAqIEFyZ3VtZW50cyB0aGF0IGFyZSBwYXNzZWQgaW50byBhIFN5c3RlbSBmdW5jdGlvbiBvbiBlYWNoIGl0ZXJhdGlvbi5cbiAqIFRoaXMgaXMgaG93IHlvdSBhY2NlcyB0aGluZ3MgbGlrZSB0aGUgZW50aXR5IHRoYXQgcGFydGljdWxhciBlbnRpdHkgdG8gYWN0IG9uLFxuICogYXMgd2VsbCBhcyBzb21lIG90aGVyIGhlbHBmdWwgcGFyYW1zIGxpa2UgaWYgdGhlIGVudGl0eSBpcyB0aGUgZmlyc3Qgb3IgbGFzdCBlbnRpdHlcbiAqIGluIHRoZSBncm91cCBvZiBlbnRpdGllcyB0aGF0IGJlaW5nIGl0ZXJhdGVkIG92ZXIuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU3lzdGVtRnVuY0FyZ3M8Q1QgZXh0ZW5kcyBDbGFzczxhbnk+PiB7XG4gIC8qKlxuICAgKiBUaGUgY3VycmVudCBlbnRpdHkgYmVpbmcgaXRlcmF0ZWQuXG4gICAqL1xuICBlbnRpdHk6IEVudGl0eTxDVD47XG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50cyB0aGF0IGJlbG9uZyB0byB0aGUgZW50aXR5XG4gICAqL1xuICBjb21wb25lbnRzOiBDb21wb25lbnRDb2xsZWN0aW9uPENUPjtcbiAgLyoqXG4gICAqIFRoZSBXb3JsZCBpbnN0YW5jZS5cbiAgICogVXNlIHRoaXMgdG8gYWNjZXNzIG90aGVyIGVudGl0aWVzLlxuICAgKi9cbiAgd29ybGQ6IFdvcmxkPENUPjtcbiAgaW5kZXg6IG51bWJlcjtcbiAgc2l6ZTogbnVtYmVyO1xuICAvKipcbiAgICogSXMgdGhlIGZpcnN0IGVudGl0eSB0byBiZSBpdGVyYXRlZCBvbiB0aGlzIHJ1biBvZiBhIHN5c3RlbS5cbiAgICogSGVscGZ1bCBmb3Igc2V0dGluZyB1cCBzdGF0ZSB0aGF0IGlzIHRoZSBzYW1lIGZvciBhbGwgZW50aXRpZXMgb25seSBvbmNlLlxuICAgKi9cbiAgaXNGaXJzdDogYm9vbGVhbjtcbiAgLyoqXG4gICAqIElzIHRoZSBsYXN0IGVudGl0eSB0byBiZSBpdGVyYXRlZCBvbiB0aGlzIHJ1biBvZiBhIHN5c3RlbS5cbiAgICogQ2FuIGJlIGhlbHBmdWwgdG8gdGVhciBkb3duIGFueXRoaW5nIHRoYXQgc2hvdWxkIGJlIGRlYWx0IHdpdGggYWZ0ZXIgYWxsIHRoZSBlbnRpdGVzIGhhdmUgcmFuLlxuICAgKi9cbiAgaXNMYXN0OiBib29sZWFuO1xufVxuXG4vKipcbiAqIEZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIHdoZW4gYSBzeXN0ZW0gaXMgcnVuLlxuICovXG5leHBvcnQgdHlwZSBTeXN0ZW1GdW5jPENUIGV4dGVuZHMgQ2xhc3M8Q1Q+PiA9IChcbiAgc3l0ZW1GdW5jQXJnczogU3lzdGVtRnVuY0FyZ3M8Q1Q+LFxuKSA9PiB2b2lkO1xuXG4vKipcbiAqIFRoaXMgaXMgaG93IHlvdSBjcmVhdGUgYSBTeXN0ZW0uXG4gKiBAZXhhbXBsZVxuICogYGBgXG4gKiBjcmVhdGVTeXN0ZW0od29ybGQsIFsnQ29tcG9uZW50VHlwZSddLCAoeyBlbnRpdHkgfSkgPT4gJ0RvIGZ1biBzeXN0ZW0gdGhpbmdzIGhlcmUuJylcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3lzdGVtPENUIGV4dGVuZHMgQ2xhc3M8YW55Pj4oXG4vLyBleHBvcnQgZnVuY3Rpb24gY3JlYXRlU3lzdGVtPENUIGV4dGVuZHMgQ29tcFR5cGVzPENUPj4oXG4gIHdvcmxkOiBXb3JsZDxDVD4sXG4gIC8vIGNUeXBlczogQ1RbXSxcbiAgY1R5cGVzOiBDVFtdLFxuICBzeXN0ZW1GdW5jOiBTeXN0ZW1GdW5jPENUPlxuKTogU3lzdGVtIHtcbiAgY29uc3QgY05hbWVzID0gY1R5cGVzLm1hcChjdCA9PiBjdC5uYW1lKTtcbiAgd29ybGQucmVnaXN0ZXJTeXN0ZW0oY05hbWVzKTtcbiAgLy8gd29ybGQucmVnaXN0ZXJTeXN0ZW0oY1R5cGVzKTtcblxuICByZXR1cm4gKCk6IHZvaWQgPT4ge1xuICAgIGxldCBpbmRleCA9IDA7XG4gICAgY29uc3Qgc2l6ZSA9IHdvcmxkLmVudGl0aWVzQnlDVHlwZXMuc2l6ZTtcblxuICAgIC8vIFVzZWQgZm9yIG1hdGNoaW5nIHRoZSBhcnJheSBvZiBDb21wb25lbnRUeXBlcyB3aGljaCBpcyB0aGUga2V5XG4gICAgLy8gb2Ygd2hlcmUgdGhlIENvbXBvbmVudENvbGxlY3Rpb24gaXMsIHdpdGggdGhlIGFycmF5IG9mIENvbXBvbmVudFR5cGVzXG4gICAgLy8gdGhhdCBhcmUgcGFzc2VzLlxuICAgIC8vIE1pZ2h0IGJlIG5pY2UgaW4gdGhlIGZ1dHVyZSB0byBnbyBiYWNrIHRvIGEgcmVmIGNoZWNrIG9uIGNUeXBlcywgYnV0XG4gICAgLy8gZm9yIG5vdyB0aGlzIGRvZXNuJ3Qgc2VlbSB0byBiZSB0aGF0IG11Y2ggb2YgYSBwZXJmIGhpdC5cbiAgICAvLyBmb3IgKGNvbnN0IGN0IG9mIHdvcmxkLmVudGl0aWVzQnlDVHlwZXMua2V5cygpKSB7XG4gICAgLy8gICBpZiAoY1R5cGVzLmxlbmd0aCA9PT0gY3QubGVuZ3RoICYmIGNUeXBlcy5ldmVyeShjID0+IGN0LmluY2x1ZGVzKGMpKSkge1xuICAgIC8vICAgICBmb3IgKGNvbnN0IGVpZCBvZiB3b3JsZC5lbnRpdGllc0J5Q1R5cGVzLmdldChjVHlwZXMpKSB7XG4gICAgLy8gICAgICAgY29uc3QgYXJnczogU3lzdGVtRnVuY0FyZ3M8Q1Q+ID0ge1xuICAgIC8vICAgICAgICAgZW50aXR5OiB3b3JsZC5lbnRpdGllcy5nZXQoZWlkKSxcbiAgICAvLyAgICAgICAgIGNvbXBvbmVudHM6IHdvcmxkLmNvbXBvbmVudENvbGxlY3Rpb25zLmdldChlaWQpLFxuICAgIC8vICAgICAgICAgd29ybGQsXG4gICAgLy8gICAgICAgICBpbmRleCxcbiAgICAvLyAgICAgICAgIHNpemUsXG4gICAgLy8gICAgICAgICBpc0ZpcnN0OiBpbmRleCA9PT0gMCxcbiAgICAvLyAgICAgICAgIGlzTGFzdDogaW5kZXggKyAxID09PSBzaXplLFxuICAgIC8vICAgICAgIH1cbiAgICBcbiAgICAvLyAgICAgICBzeXN0ZW1GdW5jKGFyZ3MpO1xuICAgIFxuICAgIC8vICAgICAgIGluZGV4ICs9IDE7XG4gICAgLy8gICAgIH1cbiAgICAvLyAgIH1cbiAgICAvLyB9XG5cbiAgICBjb25zdCBjVHlwZUFycnMgPSB3b3JsZC5lbnRpdGllc0J5Q1R5cGVzLmdldChjTmFtZXMpIHx8IG5ldyBTZXQoKTtcblxuICAgIGZvciAoY29uc3QgZWlkIG9mIGNUeXBlQXJycykge1xuICAgICAgY29uc3QgYXJnczogU3lzdGVtRnVuY0FyZ3M8Q1Q+ID0ge1xuICAgICAgICBlbnRpdHk6IHdvcmxkLmVudGl0aWVzLmdldChlaWQpIHx8IG5ldyBFbnRpdHk8Q1Q+KHdvcmxkKSxcbiAgICAgICAgY29tcG9uZW50czogd29ybGQuY29tcG9uZW50Q29sbGVjdGlvbnMuZ2V0KGVpZCkgfHwgbmV3IENvbXBvbmVudENvbGxlY3Rpb248Q1Q+KCksXG4gICAgICAgIHdvcmxkLFxuICAgICAgICBpbmRleCxcbiAgICAgICAgc2l6ZSxcbiAgICAgICAgaXNGaXJzdDogaW5kZXggPT09IDAsXG4gICAgICAgIGlzTGFzdDogaW5kZXggKyAxID09PSBzaXplLFxuICAgICAgfVxuXG4gICAgICBzeXN0ZW1GdW5jKGFyZ3MpO1xuXG4gICAgICBpbmRleCArPSAxO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IEVudGl0eSwgeyBFbnRpdHlJZCB9IGZyb20gXCIuL0VudGl0eVwiO1xuaW1wb3J0IENvbXBvbmVudENvbGxlY3Rpb24gZnJvbSBcIi4vQ29tcG9uZW50Q29sbGVjdGlvblwiO1xuaW1wb3J0IHsgVGFnIH0gZnJvbSBcIi4vVGFnXCI7XG5pbXBvcnQgeyBjcmVhdGVTeXN0ZW0sIFN5c3RlbSwgU3lzdGVtRnVuYyB9IGZyb20gJy4vU3lzdGVtJztcblxudHlwZSBDbGFzczxUPiA9IHsgbmV3ICguLi5hcmdzOiBhbnlbXSk6IFQgfTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV29ybGQ8Q1QgZXh0ZW5kcyBDbGFzczxhbnk+PiB7XG4gIGNvbXBvbmVudENvbGxlY3Rpb25zOiBNYXA8RW50aXR5SWQsIENvbXBvbmVudENvbGxlY3Rpb248Q1Q+PiA9IG5ldyBNYXAoKTtcblxuICBlbnRpdGllczogTWFwPEVudGl0eUlkLCBFbnRpdHk8Q1Q+PiA9IG5ldyBNYXAoKTtcblxuICBlbnRpdGllc0J5Q1R5cGVzOiBNYXA8c3RyaW5nW10sIFNldDxFbnRpdHlJZD4+ID0gbmV3IE1hcCgpO1xuXG4gIGVudGl0aWVzQnlUYWdzOiBNYXA8VGFnLCBTZXQ8RW50aXR5SWQ+PiA9IG5ldyBNYXAoKTtcblxuICAvKipcbiAgICogXCJmaW5kc1wiIGEgc2luZ2xlIGVudGl0eSBiYXNlZCBvbiBhIHByZWRpY2F0ZVxuICAgKi9cbiAgZmluZCA9IChwcmVkaWNhdGU6IChlbnRpdHk6IEVudGl0eTxDVD4pID0+IGJvb2xlYW4pOiBFbnRpdHk8Q1Q+IHwgbnVsbCA9PiB7XG4gICAgZm9yIChjb25zdCBlbnRpdHkgb2YgdGhpcy5lbnRpdGllcy52YWx1ZXMoKSkge1xuICAgICAgaWYgKHByZWRpY2F0ZShlbnRpdHkpKSB7XG4gICAgICAgIHJldHVybiBlbnRpdHk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgLyoqXG4gICAqIFwiZmluZHNcIiBhbGwgZW50aXRpZXMgYmFzZWQgb24gYSBwcmVkaWNhdGUsIGtpbmRhIGxpa2UgZmlsdGVyLlxuICAgKi9cbiAgZmluZEFsbCA9IChwcmVkaWNhdGU6IChlbnRpdHk6IEVudGl0eTxDVD4pID0+IGJvb2xlYW4pOiBFbnRpdHk8Q1Q+W10gPT4ge1xuICAgIGNvbnN0IHJlc3VsdHM6IEVudGl0eTxDVD5bXSA9IFtdO1xuXG4gICAgZm9yIChjb25zdCBlbnRpdHkgb2YgdGhpcy5lbnRpdGllcy52YWx1ZXMoKSkge1xuICAgICAgaWYgKHByZWRpY2F0ZShlbnRpdHkpKSB7XG4gICAgICAgIHJlc3VsdHMucHVzaChlbnRpdHkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBcImxvY2F0ZXNcIiBhIHNpbmdsZSBlbnRpdHkgYmFzZWQgb24gaXRzIENvbXBvbmVudHMuXG4gICAqL1xuICBsb2NhdGUgPSAoY2w6IENUIHwgQ1RbXSk6IEVudGl0eTxDVD4gfCBudWxsID0+IHtcbiAgICBmb3IgKGNvbnN0IGVudGl0eSBvZiB0aGlzLmVudGl0aWVzLnZhbHVlcygpKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZyhcImVudGl0eT9cIiwgZW50aXR5LmNvbXBvbmVudHMsIGNsLm5hbWUpO1xuICAgICAgaWYgKGVudGl0eS5jb21wb25lbnRzLmhhcyhjbCkpIHtcbiAgICAgICAgcmV0dXJuIGVudGl0eTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICAvKipcbiAgICogTG9jYXRlcyBhbGwgZW50aXRpZXMgdGhhdCBjb250YWluIHRoZSBjb21wb25lbnRzIG5hbWVkXG4gICAqL1xuICBsb2NhdGVBbGwgPSAoY2w6IENUIHwgQ1RbXSk6IEVudGl0eTxDVD5bXSA9PiB7XG4gICAgY29uc3QgcmVzdWx0czogRW50aXR5PENUPltdID0gW107XG5cbiAgICBmb3IgKGNvbnN0IGVudGl0eSBvZiB0aGlzLmVudGl0aWVzLnZhbHVlcygpKSB7XG4gICAgICBpZiAoZW50aXR5LmNvbXBvbmVudHMuaGFzKGNsKSkge1xuICAgICAgICByZXN1bHRzLnB1c2goZW50aXR5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICAvKipcbiAgICogR3JhYnMgdGhlIGZpcnN0IGVudGl0eSwgYW5kIGl0cyByZWxhdGVkIGNvbXBvbmVudCwgdGhhdCBtYXRjaGVzIHRoZSBjb21wb25lbnQgdHlwZS5cbiAgICogQGV4YW1wbGVcbiAgICogYGBgXG4gICAqIGNvbnN0IHsgZW50aXR5LCBjb21wb25lbnQgfSA9IHdvcmxkLmdyYWIoTXlDb21wb25lbnQpO1xuICAgKiBgYGBcbiAgICovXG4gIGdyYWIgPSA8VD4oXG4gICAgY2w6IENsYXNzPFQ+XG4gICk6IHsgZW50aXR5OiBFbnRpdHk8Q1Q+OyBjb21wb25lbnQ6IEluc3RhbmNlVHlwZTx0eXBlb2YgY2w+IH0gfCBudWxsID0+IHtcbiAgICAvLyBjb25zdCBlbnRpdHkgPSB0aGlzLmxvY2F0ZSgoY2wgYXMgdW5rbm93bikgYXMgQ1Rba2V5b2YgQ1RdKTtcbiAgICBjb25zdCBlbnRpdHkgPSB0aGlzLmxvY2F0ZSgoY2wgYXMgdW5rbm93bikgYXMgQ1QpO1xuXG4gICAgaWYgKGVudGl0eSkge1xuICAgICAgY29uc3QgY2MgPVxuICAgICAgICB0aGlzLmNvbXBvbmVudENvbGxlY3Rpb25zLmdldChlbnRpdHkuaWQpIHx8XG4gICAgICAgIG5ldyBDb21wb25lbnRDb2xsZWN0aW9uPENUPigpO1xuXG4gICAgICBjb25zdCBjb21wb25lbnQgPSBjYy5nZXQ8VD4oY2wpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBlbnRpdHksXG4gICAgICAgIGNvbXBvbmVudCxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdyYWIgc2luZ2xlIGNvbXBvbmVudCBiYXNlZCBvbiBjb21wb25lbnQgdHlwZSBhbmQgcHJlZGljYXRlLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGNvbnN0IHsgZW50aXR5LCBjb21wb25lbnQgfSA9IHdvcmxkLmdyYWJCeShGaXJzdENvbXBvbmVudCwgKGNvbXApID0+IGNvbXAuaWQgPT0gJ2F3ZXNvbWUnKVxuICAgKiBgYGBcbiAgICovXG4gIGdyYWJCeSA9IDxUPihcbiAgICBjbDogQ2xhc3M8VD4sXG4gICAgcHJlZGljYXRlOiAoY29tcDogSW5zdGFuY2VUeXBlPHR5cGVvZiBjbD4pID0+IGJvb2xlYW5cbiAgKTogeyBlbnRpdHk6IEVudGl0eTxDVD47IGNvbXBvbmVudDogSW5zdGFuY2VUeXBlPHR5cGVvZiBjbD4gfSB8IG51bGwgPT4ge1xuICAgIGNvbnN0IGVudGl0aWVzID0gdGhpcy5sb2NhdGVBbGwoKGNsIGFzIHVua25vd24pIGFzIENUKTtcblxuICAgIGZvciAoY29uc3QgZW50aXR5IG9mIGVudGl0aWVzKSB7XG4gICAgICBjb25zdCBjYyA9XG4gICAgICAgIHRoaXMuY29tcG9uZW50Q29sbGVjdGlvbnMuZ2V0KGVudGl0eS5pZCkgfHxcbiAgICAgICAgbmV3IENvbXBvbmVudENvbGxlY3Rpb248Q1Q+KCk7XG5cbiAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGNjLmdldDxUPihjbCk7XG5cbiAgICAgIGlmIChwcmVkaWNhdGUoY29tcG9uZW50KSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbXBvbmVudCxcbiAgICAgICAgICBlbnRpdHksXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdyYWIgYWxsIHRoZSBjb21wb25lbnRzIHByaW1hcmlseSwgYW5kIHRoZSBlbnRpdGllcyBpZiBuZWVkZWRcbiAgICovXG4gIGdyYWJBbGwgPSA8VD4oXG4gICAgY2w6IENsYXNzPFQ+XG4gICk6IHsgZW50aXR5OiBFbnRpdHk8Q1Q+OyBjb21wb25lbnQ6IEluc3RhbmNlVHlwZTx0eXBlb2YgY2w+IH1bXSA9PiB7XG4gICAgY29uc3QgZW50aXRpZXMgPSB0aGlzLmxvY2F0ZUFsbCgoY2wgYXMgdW5rbm93bikgYXMgQ1QpO1xuXG4gICAgcmV0dXJuIGVudGl0aWVzLm1hcCgoZW50aXR5KSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBlbnRpdHksXG4gICAgICAgIGNvbXBvbmVudDogZW50aXR5LmNvbXBvbmVudHMuZ2V0PFQ+KGNsKSxcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogR2l2ZW4gYW4gZW50aXR5IGlkIGFuZCBjb21wb25lbnRUeXBlLCByZXR1cm5zIGNvbXBvbmVudFxuICAgKi9cbiAgZ2V0ID0gPFQ+KGVpZDogRW50aXR5SWQsIGNsOiBDbGFzczxUPik6IEluc3RhbmNlVHlwZTx0eXBlb2YgY2w+ID0+IHtcbiAgICBjb25zdCBjYyA9XG4gICAgICB0aGlzLmNvbXBvbmVudENvbGxlY3Rpb25zLmdldChlaWQpIHx8IG5ldyBDb21wb25lbnRDb2xsZWN0aW9uPENUPigpO1xuXG4gICAgcmV0dXJuIGNjLmdldDxUPihjbCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCBhbiBlbnRpdHkgdGhhdCBoYXMgYmVlbiB0YWdnZWQgd2l0aCB0aGUgZ2l2ZW4gdGFnLCBvciByZXR1cm4gbnVsbDtcbiAgICovXG4gIGdldFRhZ2dlZCA9ICh0YWc6IFRhZyk6IEVudGl0eTxDVD4gfCBudWxsID0+IHtcbiAgICBjb25zdCB0YWdFbnRpdHlJZHMgPSB0aGlzLmVudGl0aWVzQnlUYWdzLmdldCh0YWcpO1xuXG4gICAgaWYgKHRhZ0VudGl0eUlkcykge1xuICAgICAgY29uc3QgZW50aXR5SWQgPSB0YWdFbnRpdHlJZHMudmFsdWVzKCkubmV4dCgpLnZhbHVlO1xuXG4gICAgICBjb25zdCBlbnRpdHkgPSB0aGlzLmVudGl0aWVzLmdldChlbnRpdHlJZCk7XG5cbiAgICAgIGlmIChlbnRpdHkpIHtcbiAgICAgICAgcmV0dXJuIGVudGl0eTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICAvKipcbiAgICogR2V0dCBhbGwgZW50aXRpZXMgdGhhdCBoYXZlIGJlZW4gdGFnZ2VkIHdpdGggdGhlIGdpdmVuIHRhZy5cbiAgICogQHBhcmFtIHRhZyBBIHN0cmluZyBvciBudW1iZXIuXG4gICAqL1xuICBnZXRBbGxUYWdnZWQgPSAodGFnOiBUYWcpOiBFbnRpdHk8Q1Q+W10gPT4ge1xuICAgIGxldCBlbnRpdGllczogRW50aXR5PENUPltdID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIGNvbnN0IHRhZ0VudGl0eUlkcyA9IHRoaXMuZW50aXRpZXNCeVRhZ3MuZ2V0KHRhZyk7XG5cbiAgICBpZiAodGFnRW50aXR5SWRzKSB7XG4gICAgICBmb3IgKGNvbnN0IGVudGl0eUlkIG9mIHRhZ0VudGl0eUlkcykge1xuICAgICAgICBjb25zdCBlbnRpdHkgPSB0aGlzLmVudGl0aWVzLmdldChlbnRpdHlJZCk7XG4gICAgICAgIGlmIChlbnRpdHkpIHtcbiAgICAgICAgICBlbnRpdGllcy5wdXNoKGVudGl0eSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZW50aXRpZXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldCBhIGNvbXBvbmVudCBvbiB0aGUgZ2l2ZW4gZW50aXR5XG4gICAqL1xuICBzZXQgPSAoZWlkOiBFbnRpdHlJZCwgY29tcG9uZW50OiBJbnN0YW5jZVR5cGU8Q1Q+KTogdGhpcyA9PiB7XG4gICAgY29uc3QgY2MgPVxuICAgICAgdGhpcy5jb21wb25lbnRDb2xsZWN0aW9ucy5nZXQoZWlkKSB8fCBuZXcgQ29tcG9uZW50Q29sbGVjdGlvbjxDVD4oKTtcblxuICAgIGNjLmFkZChjb21wb25lbnQpO1xuXG4gICAgdGhpcy5jb21wb25lbnRDb2xsZWN0aW9ucy5zZXQoZWlkLCBjYyk7XG5cbiAgICBmb3IgKGNvbnN0IFtjdEFyciwgZW50aXR5U2V0XSBvZiB0aGlzLmVudGl0aWVzQnlDVHlwZXMpIHtcbiAgICAgIGlmICgoY3RBcnIgYXMgc3RyaW5nW10pLmV2ZXJ5KGNjLmhhc0J5TmFtZSkpIHtcbiAgICAgICAgZW50aXR5U2V0LmFkZChlaWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZW1vdmUgYSBjb21wb25lbnQgZnJvbSB0aGUgZ2l2ZW4gZW50aXR5LlxuICAgKiBOT1RFOiBUaGlzIHdpbGwgY2hhbmdlIHdoYXQgc3lzdGVtcyB3aWxsIGJlIGNhbGxlZCBvbiB0aGUgZW50aXR5LlxuICAgKi9cbiAgcmVtb3ZlID0gKGVpZDogRW50aXR5SWQsIGNUeXBlOiBDVCk6IHRoaXMgPT4ge1xuICAgIGNvbnN0IGNjID1cbiAgICAgIHRoaXMuY29tcG9uZW50Q29sbGVjdGlvbnMuZ2V0KGVpZCkgfHwgbmV3IENvbXBvbmVudENvbGxlY3Rpb248Q1Q+KCk7XG5cbiAgICAvLyByZW1vdmUgZW50aXR5IGZyb20gY3VycmVudCBlbnRpdGllc0J5Q1R5cGVzXG4gICAgZm9yIChjb25zdCBbY3RBcnIsIGVudGl0eVNldF0gb2YgdGhpcy5lbnRpdGllc0J5Q1R5cGVzKSB7XG4gICAgICBpZiAoKGN0QXJyIGFzIHN0cmluZ1tdKS5ldmVyeShjYy5oYXNCeU5hbWUpKSB7XG4gICAgICAgIGVudGl0eVNldC5kZWxldGUoZWlkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjYy5yZW1vdmUoY1R5cGUpO1xuXG4gICAgLy8gTW92ZSBlbnRpdHlJZCB0byBuZXcgQ1R5cGVzIGlmIG5lZWRlZC5cbiAgICBmb3IgKGNvbnN0IFtjdEFyciwgZW50aXR5U2V0XSBvZiB0aGlzLmVudGl0aWVzQnlDVHlwZXMpIHtcbiAgICAgIGlmICgoY3RBcnIgYXMgc3RyaW5nW10pLmV2ZXJ5KGNjLmhhc0J5TmFtZSkpIHtcbiAgICAgICAgZW50aXR5U2V0LmFkZChlaWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBJbnRlcm5hbCBtZXRob2QgdXNlZCBpbiBzZXR0aW5nIHVwIGEgbmV3IHN5c3RlbS5cbiAgICovXG4gIHJlZ2lzdGVyU3lzdGVtKGNOYW1lczogc3RyaW5nW10pOiB0aGlzIHtcbiAgICB0aGlzLmVudGl0aWVzQnlDVHlwZXMuc2V0KGNOYW1lcywgbmV3IFNldDxFbnRpdHlJZD4oKSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBhbiBhbGlhcyBmb3IgY3JlYXRlU3lzdGVtKCkuXG4gICAqL1xuICBjcmVhdGVTeXN0ZW0oY2w6IENUW10sIHN5c3RlbUZ1bmM6IFN5c3RlbUZ1bmM8Q1Q+KTogU3lzdGVtIHtcbiAgICBjb25zdCBzeXN0ZW0gPSBjcmVhdGVTeXN0ZW08Q1Q+KHRoaXMsIGNsLCBzeXN0ZW1GdW5jKTtcblxuICAgIHJldHVybiBzeXN0ZW07XG4gIH1cblxuICByZWdpc3RlckVudGl0eShlbnRpdHk6IEVudGl0eTxDVD4pOiBXb3JsZDxDVD4ge1xuICAgIGNvbnN0IGNjID0gbmV3IENvbXBvbmVudENvbGxlY3Rpb248Q1Q+KCk7XG5cbiAgICB0aGlzLmNvbXBvbmVudENvbGxlY3Rpb25zLnNldChlbnRpdHkuaWQsIGNjKTtcbiAgICB0aGlzLmVudGl0aWVzLnNldChlbnRpdHkuaWQsIGVudGl0eSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYWxsIGNvbXBvbmVudHMgdGhhdCBiZWxvbmcgdG8gYW4gZW50aXR5LlxuICAgKi9cbiAgY2xlYXJFbnRpdHlDb21wb25lbnRzKGVpZDogRW50aXR5SWQpOiB0aGlzIHtcbiAgICB0aGlzLmNvbXBvbmVudENvbGxlY3Rpb25zLnNldChlaWQsIG5ldyBDb21wb25lbnRDb2xsZWN0aW9uPENUPigpKTtcblxuICAgIGZvciAoY29uc3QgZW50aXR5U2V0IG9mIHRoaXMuZW50aXRpZXNCeUNUeXBlcy52YWx1ZXMoKSkge1xuICAgICAgaWYgKGVudGl0eVNldC5oYXMoZWlkKSkge1xuICAgICAgICBlbnRpdHlTZXQuZGVsZXRlKGVpZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGFuIGVudGl0eSB0aGF0IGlzIGluIHRoZSB3b3JsZC5cbiAgICogQmFzaWNhbGx5IGp1c3QgbmV3IEVudGl0eSh3b3JsZCksIGJ1dCBzYXZlcyBhbiBpbXBvcnQgb2YgRW50aXR5LlxuICAgKi9cbiAgY3JlYXRlRW50aXR5KCk6IEVudGl0eTxDVD4ge1xuICAgIGNvbnN0IGVudGl0eSA9IG5ldyBFbnRpdHkodGhpcyk7XG5cbiAgICByZXR1cm4gZW50aXR5O1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFuIGVudGl0eS5cbiAgICogU2FtZSBhcyBlbnRpdHkuZGVzdHJveSgpLlxuICAgKi9cbiAgZGVzdHJveUVudGl0eShlaWQ6IEVudGl0eUlkKTogV29ybGQ8Q1Q+IHtcbiAgICB0aGlzLmNvbXBvbmVudENvbGxlY3Rpb25zLmRlbGV0ZShlaWQpO1xuICAgIHRoaXMuZW50aXRpZXMuZGVsZXRlKGVpZCk7XG5cbiAgICBmb3IgKGNvbnN0IGVudGl0eVNldCBvZiB0aGlzLmVudGl0aWVzQnlDVHlwZXMudmFsdWVzKCkpIHtcbiAgICAgIGlmIChlbnRpdHlTZXQuaGFzKGVpZCkpIHtcbiAgICAgICAgZW50aXR5U2V0LmRlbGV0ZShlaWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHJlbW92ZSBhbnkgdGFnIGFzc29jaWF0aW9ucyB3aXRoIGRlc3Ryb3llZCBlbnRpdGllcy5cbiAgICBmb3IgKGNvbnN0IFt0YWcsIGVudGl0eVNldF0gb2YgdGhpcy5lbnRpdGllc0J5VGFncykge1xuICAgICAgaWYgKGVudGl0eVNldC5oYXMoZWlkKSkge1xuICAgICAgICBlbnRpdHlTZXQuZGVsZXRlKGVpZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbnRpdHlTZXQuc2l6ZSA9PT0gMCkge1xuICAgICAgICB0aGlzLmVudGl0aWVzQnlUYWdzLmRlbGV0ZSh0YWcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG4iLCJpbXBvcnQgV29ybGQgZnJvbSAnLi9Xb3JsZCc7XG5pbXBvcnQgeyBjcmVhdGVFbnRpdHkgfSBmcm9tICcuL0VudGl0eSc7XG5pbXBvcnQgeyBjcmVhdGVTeXN0ZW0gfSBmcm9tICcuL1N5c3RlbSc7XG5cbmV4cG9ydCB7XG4gIFdvcmxkLFxuICBjcmVhdGVFbnRpdHksXG4gIGNyZWF0ZVN5c3RlbSxcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n')}])}));