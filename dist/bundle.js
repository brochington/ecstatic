!function(Q,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define("ecstatic",[],n):"object"==typeof exports?exports.ecstatic=n():Q.ecstatic=n()}(window,(function(){return function(Q){var n=window.webpackHotUpdateecstatic;window.webpackHotUpdateecstatic=function(Q,B){!function(Q,n){if(!V[Q]||!y[Q])return;for(var B in y[Q]=!1,n)Object.prototype.hasOwnProperty.call(n,B)&&(b[B]=n[B]);0==--G&&0===u&&r()}(Q,B),n&&n(Q,B)};var B,t=!0,e="da3e32675378f1eb8ab5",F={},i=[],I=[];function U(Q){var n=E[Q];if(!n)return N;var t=function(t){return n.hot.active?(E[t]?-1===E[t].parents.indexOf(Q)&&E[t].parents.push(Q):(i=[Q],B=t),-1===n.children.indexOf(t)&&n.children.push(t)):(console.warn("[HMR] unexpected require("+t+") from disposed module "+Q),i=[]),N(t)},e=function(Q){return{configurable:!0,enumerable:!0,get:function(){return N[Q]},set:function(n){N[Q]=n}}};for(var F in N)Object.prototype.hasOwnProperty.call(N,F)&&"e"!==F&&"t"!==F&&Object.defineProperty(t,F,e(F));return t.e=function(Q){return"ready"===s&&g("prepare"),u++,N.e(Q).then(n,(function(Q){throw n(),Q}));function n(){u--,"prepare"===s&&(a[Q]||Z(Q),0===u&&0===G&&r())}},t.t=function(Q,n){return 1&n&&(Q=t(Q)),N.t(Q,-2&n)},t}function l(n){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:B!==n,active:!0,accept:function(Q,n){if(void 0===Q)t._selfAccepted=!0;else if("function"==typeof Q)t._selfAccepted=Q;else if("object"==typeof Q)for(var B=0;B<Q.length;B++)t._acceptedDependencies[Q[B]]=n||function(){};else t._acceptedDependencies[Q]=n||function(){}},decline:function(Q){if(void 0===Q)t._selfDeclined=!0;else if("object"==typeof Q)for(var n=0;n<Q.length;n++)t._declinedDependencies[Q[n]]=!0;else t._declinedDependencies[Q]=!0},dispose:function(Q){t._disposeHandlers.push(Q)},addDisposeHandler:function(Q){t._disposeHandlers.push(Q)},removeDisposeHandler:function(Q){var n=t._disposeHandlers.indexOf(Q);n>=0&&t._disposeHandlers.splice(n,1)},invalidate:function(){switch(this._selfInvalidated=!0,s){case"idle":(b={})[n]=Q[n],g("ready");break;case"ready":L(n);break;case"prepare":case"check":case"dispose":case"apply":(o=o||[]).push(n)}},check:X,apply:p,status:function(Q){if(!Q)return s;c.push(Q)},addStatusHandler:function(Q){c.push(Q)},removeStatusHandler:function(Q){var n=c.indexOf(Q);n>=0&&c.splice(n,1)},data:F[n]};return B=void 0,t}var c=[],s="idle";function g(Q){s=Q;for(var n=0;n<c.length;n++)c[n].call(null,Q)}var d,b,C,o,G=0,u=0,a={},y={},V={};function x(Q){return+Q+""===Q?+Q:Q}function X(Q){if("idle"!==s)throw new Error("check() is only allowed in idle status");return t=Q,g("check"),(n=1e4,n=n||1e4,new Promise((function(Q,B){if("undefined"==typeof XMLHttpRequest)return B(new Error("No browser support"));try{var t=new XMLHttpRequest,e=N.p+"hot/hot-update.json";t.open("GET",e,!0),t.timeout=n,t.send(null)}catch(Q){return B(Q)}t.onreadystatechange=function(){if(4===t.readyState)if(0===t.status)B(new Error("Manifest request to "+e+" timed out."));else if(404===t.status)Q();else if(200!==t.status&&304!==t.status)B(new Error("Manifest request to "+e+" failed."));else{try{var n=JSON.parse(t.responseText)}catch(Q){return void B(Q)}Q(n)}}}))).then((function(Q){if(!Q)return g(R()?"ready":"idle"),null;y={},a={},V=Q.c,C=Q.h,g("prepare");var n=new Promise((function(Q,n){d={resolve:Q,reject:n}}));b={};return Z(0),"prepare"===s&&0===u&&0===G&&r(),n}));var n}function Z(Q){var n;V[Q]?(y[Q]=!0,G++,(n=document.createElement("script")).charset="utf-8",n.src=N.p+"hot/hot-update.js",document.head.appendChild(n)):a[Q]=!0}function r(){g("ready");var Q=d;if(d=null,Q)if(t)Promise.resolve().then((function(){return p(t)})).then((function(n){Q.resolve(n)}),(function(n){Q.reject(n)}));else{var n=[];for(var B in b)Object.prototype.hasOwnProperty.call(b,B)&&n.push(x(B));Q.resolve(n)}}function p(n){if("ready"!==s)throw new Error("apply() is only allowed in ready status");return function n(t){var I,U,l,c,s;function d(Q){for(var n=[Q],B={},t=n.map((function(Q){return{chain:[Q],id:Q}}));t.length>0;){var e=t.pop(),F=e.id,i=e.chain;if((c=E[F])&&(!c.hot._selfAccepted||c.hot._selfInvalidated)){if(c.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:F};if(c.hot._main)return{type:"unaccepted",chain:i,moduleId:F};for(var I=0;I<c.parents.length;I++){var U=c.parents[I],l=E[U];if(l){if(l.hot._declinedDependencies[F])return{type:"declined",chain:i.concat([U]),moduleId:F,parentId:U};-1===n.indexOf(U)&&(l.hot._acceptedDependencies[F]?(B[U]||(B[U]=[]),G(B[U],[F])):(delete B[U],n.push(U),t.push({chain:i.concat([U]),id:U})))}}}}return{type:"accepted",moduleId:Q,outdatedModules:n,outdatedDependencies:B}}function G(Q,n){for(var B=0;B<n.length;B++){var t=n[B];-1===Q.indexOf(t)&&Q.push(t)}}R();var u={},a=[],y={},X=function(){console.warn("[HMR] unexpected require("+r.moduleId+") to disposed module")};for(var Z in b)if(Object.prototype.hasOwnProperty.call(b,Z)){var r;s=x(Z),r=b[Z]?d(s):{type:"disposed",moduleId:Z};var p=!1,L=!1,m=!1,A="";switch(r.chain&&(A="\nUpdate propagation: "+r.chain.join(" -> ")),r.type){case"self-declined":t.onDeclined&&t.onDeclined(r),t.ignoreDeclined||(p=new Error("Aborted because of self decline: "+r.moduleId+A));break;case"declined":t.onDeclined&&t.onDeclined(r),t.ignoreDeclined||(p=new Error("Aborted because of declined dependency: "+r.moduleId+" in "+r.parentId+A));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(r),t.ignoreUnaccepted||(p=new Error("Aborted because "+s+" is not accepted"+A));break;case"accepted":t.onAccepted&&t.onAccepted(r),L=!0;break;case"disposed":t.onDisposed&&t.onDisposed(r),m=!0;break;default:throw new Error("Unexception type "+r.type)}if(p)return g("abort"),Promise.reject(p);if(L)for(s in y[s]=b[s],G(a,r.outdatedModules),r.outdatedDependencies)Object.prototype.hasOwnProperty.call(r.outdatedDependencies,s)&&(u[s]||(u[s]=[]),G(u[s],r.outdatedDependencies[s]));m&&(G(a,[r.moduleId]),y[s]=X)}var W,h=[];for(U=0;U<a.length;U++)s=a[U],E[s]&&E[s].hot._selfAccepted&&y[s]!==X&&!E[s].hot._selfInvalidated&&h.push({module:s,parents:E[s].parents.slice(),errorHandler:E[s].hot._selfAccepted});g("dispose"),Object.keys(V).forEach((function(Q){!1===V[Q]&&function(Q){delete installedChunks[Q]}(Q)}));var S,D,Y=a.slice();for(;Y.length>0;)if(s=Y.pop(),c=E[s]){var H={},v=c.hot._disposeHandlers;for(l=0;l<v.length;l++)(I=v[l])(H);for(F[s]=H,c.hot.active=!1,delete E[s],delete u[s],l=0;l<c.children.length;l++){var T=E[c.children[l]];T&&((W=T.parents.indexOf(s))>=0&&T.parents.splice(W,1))}}for(s in u)if(Object.prototype.hasOwnProperty.call(u,s)&&(c=E[s]))for(D=u[s],l=0;l<D.length;l++)S=D[l],(W=c.children.indexOf(S))>=0&&c.children.splice(W,1);g("apply"),void 0!==C&&(e=C,C=void 0);for(s in b=void 0,y)Object.prototype.hasOwnProperty.call(y,s)&&(Q[s]=y[s]);var z=null;for(s in u)if(Object.prototype.hasOwnProperty.call(u,s)&&(c=E[s])){D=u[s];var f=[];for(U=0;U<D.length;U++)if(S=D[U],I=c.hot._acceptedDependencies[S]){if(-1!==f.indexOf(I))continue;f.push(I)}for(U=0;U<f.length;U++){I=f[U];try{I(D)}catch(Q){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:s,dependencyId:D[U],error:Q}),t.ignoreErrored||z||(z=Q)}}}for(U=0;U<h.length;U++){var k=h[U];s=k.module,i=k.parents,B=s;try{N(s)}catch(Q){if("function"==typeof k.errorHandler)try{k.errorHandler(Q)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:s,error:n,originalError:Q}),t.ignoreErrored||z||(z=n),z||(z=Q)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:s,error:Q}),t.ignoreErrored||z||(z=Q)}}if(z)return g("fail"),Promise.reject(z);if(o)return n(t).then((function(Q){return a.forEach((function(n){Q.indexOf(n)<0&&Q.push(n)})),Q}));return g("idle"),new Promise((function(Q){Q(a)}))}(n=n||{})}function R(){if(o)return b||(b={}),o.forEach(L),o=void 0,!0}function L(n){Object.prototype.hasOwnProperty.call(b,n)||(b[n]=Q[n])}var E={};function N(n){if(E[n])return E[n].exports;var B=E[n]={i:n,l:!1,exports:{},hot:l(n),parents:(I=i,i=[],I),children:[]};return Q[n].call(B.exports,B,B.exports,U(n)),B.l=!0,B.exports}return N.m=Q,N.c=E,N.d=function(Q,n,B){N.o(Q,n)||Object.defineProperty(Q,n,{enumerable:!0,get:B})},N.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},N.t=function(Q,n){if(1&n&&(Q=N(Q)),8&n)return Q;if(4&n&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(N.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&n&&"string"!=typeof Q)for(var t in Q)N.d(B,t,function(n){return Q[n]}.bind(null,t));return B},N.n=function(Q){var n=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return N.d(n,"a",n),n},N.o=function(Q,n){return Object.prototype.hasOwnProperty.call(Q,n)},N.p="/static/",N.h=function(){return e},U(0)(N.s=0)}([function(Q,n,B){Q.exports=B(1)},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, "World", function() { return /* reexport */ World_World; });\n__webpack_require__.d(__webpack_exports__, "createEntity", function() { return /* reexport */ createEntity; });\n__webpack_require__.d(__webpack_exports__, "createSystem", function() { return /* reexport */ createSystem; });\n\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/rng.js\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nfunction rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== \'undefined\' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== \'undefined\' && typeof msCrypto.getRandomValues === \'function\' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error(\'crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported\');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/regex.js\n/* harmony default export */ var regex = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/validate.js\n\n\nfunction validate(uuid) {\n  return typeof uuid === \'string\' && regex.test(uuid);\n}\n\n/* harmony default export */ var esm_browser_validate = (validate);\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/stringify.js\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var stringify_i = 0; stringify_i < 256; ++stringify_i) {\n  byteToHex.push((stringify_i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It\'s been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + \'-\' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + \'-\' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + \'-\' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + \'-\' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it\'s likely due to one\n  // of the following:\n  // - One or more input array values don\'t map to a hex octet (leading to\n  // "undefined" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!esm_browser_validate(uuid)) {\n    throw TypeError(\'Stringified UUID is invalid\');\n  }\n\n  return uuid;\n}\n\n/* harmony default export */ var esm_browser_stringify = (stringify);\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/v4.js\n\n\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return esm_browser_stringify(rnds);\n}\n\n/* harmony default export */ var esm_browser_v4 = (v4);\n// CONCATENATED MODULE: ./src/guards.ts\n// export function classIsCompType(cl: any)\nfunction isComponentInstance(Class, comp) {\n  if (!comp) {\n    return false;\n  }\n\n  if (!(comp instanceof Class)) {\n    return false;\n  }\n\n  return true;\n}\nfunction isComponentName(possibleName, entitiesByCTypes) {\n  // string\n  if (typeof possibleName !== \'string\') {\n    return false;\n  }\n\n  for (const a of entitiesByCTypes.keys()) {\n    if (a.includes(possibleName)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n// CONCATENATED MODULE: ./src/ComponentCollection.ts\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n// CT is a Union, like `type = typeof FirstComponent | typeof SecondComponent`.\nclass ComponentCollection_ComponentCollection {\n  constructor() {\n    _defineProperty(this, "components", new Map());\n\n    _defineProperty(this, "add", component => {\n      this.components.set(component.constructor.name, component);\n    });\n\n    _defineProperty(this, "update", (cl, func) => {\n      const c = this.components.get(cl.name);\n\n      if (isComponentInstance(cl, c)) {\n        const updatedComponent = func(c);\n        this.components.set(cl.name, updatedComponent);\n      }\n    });\n\n    _defineProperty(this, "remove", cType => {\n      this.components.delete(cType.name);\n    });\n\n    _defineProperty(this, "get", cl => {\n      const comp = this.components.get(cl.name);\n\n      if (isComponentInstance(cl, comp)) {\n        return comp;\n      } else {\n        throw new Error(`ComponentCollection does not have component of type ${cl.name}`);\n      }\n    });\n\n    _defineProperty(this, "has", cType => {\n      return Array.isArray(cType) ? cType.every(ct => this.components.has(ct.name) === true) : this.components.has(cType.name);\n    });\n\n    _defineProperty(this, "hasByName", cName => {\n      return Array.isArray(cName) ? cName.every(ct => this.components.has(ct) === true) : this.components.has(cName);\n    });\n  }\n\n  /**\n   * Get the component type names that are currently being used in the collection.\n   */\n  get componentTypes() {\n    return [...this.components.keys()];\n  }\n  /**\n   * Get the current number of components that are in the collection.\n   */\n\n\n  get size() {\n    return this.components.size;\n  }\n\n}\n// CONCATENATED MODULE: ./src/Entity.ts\nfunction Entity_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nclass Entity_Entity {\n  constructor(world) {\n    Entity_defineProperty(this, "_id", void 0);\n\n    Entity_defineProperty(this, "_world", void 0);\n\n    this._id = esm_browser_v4();\n    this._world = world;\n    /*\n    Registering with the World.\n    */\n\n    this._world.registerEntity(this);\n  }\n  /**\n   * Add a component to an Entity, doh.\n   */\n\n\n  add(component) {\n    this._world.set(this._id, component);\n\n    return this;\n  }\n  /**\n   * Add a tag to a component\n   */\n\n\n  addTag(tag) {\n    const entitySet = this._world.entitiesByTags.has(tag) ? this._world.entitiesByTags.get(tag) : new Set();\n\n    if (entitySet) {\n      entitySet.add(this._id);\n\n      this._world.entitiesByTags.set(tag, entitySet);\n    }\n\n    return this;\n  }\n  /**\n   * Determines if an entity has a component related to it.\n   */\n\n\n  has(cType) {\n    const cc = this._world.componentCollections.get(this._id) || new ComponentCollection_ComponentCollection();\n    return cc.has(cType);\n  }\n  /**\n   * Check to see if an entity tagged with a given tag.\n   */\n\n\n  hasTag(tag) {\n    if (this._world.entitiesByTags.has(tag)) {\n      const entitySet = this._world.entitiesByTags.get(tag);\n\n      if (entitySet) {\n        return entitySet.has(this._id);\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Get a component that belongs to an entity.\n   */\n\n\n  get(cl) {\n    const cc = this._world.componentCollections.get(this._id) || new ComponentCollection_ComponentCollection();\n    const component = cc.get(cl);\n    return component;\n  }\n  /**\n   * Get all components that have been added to an entity, via a ComponentCollection\n   */\n\n\n  getAll() {\n    return this._world.componentCollections.get(this._id) || new ComponentCollection_ComponentCollection();\n  }\n  /**\n   * Remove a component from an entity.\n   * @param cType A component class, eg MyComponent\n   */\n\n\n  remove(cType) {\n    this._world.remove(this._id, cType);\n\n    return this;\n  }\n  /**\n   * Remove a tag from an entity\n   */\n\n\n  removeTag(tag) {\n    if (this._world.entitiesByTags.has(tag)) {\n      const entitySet = this._world.entitiesByTags.get(tag);\n\n      if (entitySet) {\n        entitySet.delete(this._id);\n\n        if (entitySet.size === 0) {\n          this._world.entitiesByTags.delete(tag);\n        }\n      }\n    }\n\n    return this;\n  }\n  /** Clears all components from an Entity */\n\n\n  clear() {\n    this._world.clearEntityComponents(this._id);\n\n    return this;\n  }\n  /**\n   * Remove all tags on an entity\n   */\n\n\n  clearTags() {\n    for (const [tag, entitySet] of this._world.entitiesByTags.entries()) {\n      entitySet.delete(this._id);\n\n      if (entitySet.size === 0) {\n        this._world.entitiesByTags.delete(tag);\n      }\n    }\n\n    return this;\n  }\n\n  destroy() {\n    this._world.destroyEntity(this._id);\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get world() {\n    return this._world;\n  }\n  /**\n   * Get all components that have been added to an entity, via a ComponentCollection.\n   * Does the same thing as entityInstance.getAll().\n   */\n\n\n  get components() {\n    return this._world.componentCollections.get(this._id) || new ComponentCollection_ComponentCollection();\n  }\n  /**\n   * Retrieves all the tags that have been added to this entity.\n   */\n\n\n  get tags() {\n    const tags = new Set();\n\n    for (const [tag, entitySet] of this._world.entitiesByTags.entries()) {\n      if (entitySet.has(this._id)) {\n        tags.add(tag);\n      }\n    }\n\n    return tags;\n  }\n\n}\nfunction createEntity(world) {\n  const entity = new Entity_Entity(world);\n  return entity;\n}\n// CONCATENATED MODULE: ./src/System.ts\n\n\n\n/**\n * This is how you create a System.\n * @example\n * ```\n * createSystem(world, [\'ComponentType\'], ({ entity }) => \'Do fun system things here.\')\n * ```\n */\nfunction createSystem( // export function createSystem<CT extends CompTypes<CT>>(\nworld, // cTypes: CT[],\ncTypes, systemFunc) {\n  const cNames = cTypes.map(ct => ct.name);\n  world.registerSystem(cNames); // world.registerSystem(cTypes);\n\n  return () => {\n    let index = 0;\n    const size = world.entitiesByCTypes.size; // Used for matching the array of ComponentTypes which is the key\n    // of where the ComponentCollection is, with the array of ComponentTypes\n    // that are passes.\n    // Might be nice in the future to go back to a ref check on cTypes, but\n    // for now this doesn\'t seem to be that much of a perf hit.\n    // for (const ct of world.entitiesByCTypes.keys()) {\n    //   if (cTypes.length === ct.length && cTypes.every(c => ct.includes(c))) {\n    //     for (const eid of world.entitiesByCTypes.get(cTypes)) {\n    //       const args: SystemFuncArgs<CT> = {\n    //         entity: world.entities.get(eid),\n    //         components: world.componentCollections.get(eid),\n    //         world,\n    //         index,\n    //         size,\n    //         isFirst: index === 0,\n    //         isLast: index + 1 === size,\n    //       }\n    //       systemFunc(args);\n    //       index += 1;\n    //     }\n    //   }\n    // }\n\n    const cTypeArrs = world.entitiesByCTypes.get(cNames) || new Set();\n\n    for (const eid of cTypeArrs) {\n      const args = {\n        entity: world.entities.get(eid) || new Entity_Entity(world),\n        components: world.componentCollections.get(eid) || new ComponentCollection_ComponentCollection(),\n        world,\n        index,\n        size,\n        isFirst: index === 0,\n        isLast: index + 1 === size\n      };\n      systemFunc(args);\n      index += 1;\n    }\n  };\n}\n// CONCATENATED MODULE: ./src/World.ts\nfunction World_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\nclass World_World {\n  constructor() {\n    World_defineProperty(this, "componentCollections", new Map());\n\n    World_defineProperty(this, "entities", new Map());\n\n    World_defineProperty(this, "entitiesByCTypes", new Map());\n\n    World_defineProperty(this, "entitiesByTags", new Map());\n\n    World_defineProperty(this, "find", predicate => {\n      for (const entity of this.entities.values()) {\n        if (predicate(entity)) {\n          return entity;\n        }\n      }\n\n      return null;\n    });\n\n    World_defineProperty(this, "findAll", predicate => {\n      const results = [];\n\n      for (const entity of this.entities.values()) {\n        if (predicate(entity)) {\n          results.push(entity);\n        }\n      }\n\n      return results;\n    });\n\n    World_defineProperty(this, "locate", cl => {\n      for (const entity of this.entities.values()) {\n        // console.log("entity?", entity.components, cl.name);\n        if (entity.components.has(cl)) {\n          return entity;\n        }\n      }\n\n      return null;\n    });\n\n    World_defineProperty(this, "locateAll", cl => {\n      const results = [];\n\n      for (const entity of this.entities.values()) {\n        if (entity.components.has(cl)) {\n          results.push(entity);\n        }\n      }\n\n      return results;\n    });\n\n    World_defineProperty(this, "grab", cl => {\n      // const entity = this.locate((cl as unknown) as CT[keyof CT]);\n      const entity = this.locate(cl);\n\n      if (entity) {\n        const cc = this.componentCollections.get(entity.id) || new ComponentCollection_ComponentCollection();\n        const component = cc.get(cl);\n        return {\n          entity,\n          component\n        };\n      }\n\n      return null;\n    });\n\n    World_defineProperty(this, "grabBy", (cl, predicate) => {\n      const entities = this.locateAll(cl);\n\n      for (const entity of entities) {\n        const cc = this.componentCollections.get(entity.id) || new ComponentCollection_ComponentCollection();\n        const component = cc.get(cl);\n\n        if (predicate(component)) {\n          return {\n            component,\n            entity\n          };\n        }\n      }\n\n      return null;\n    });\n\n    World_defineProperty(this, "grabAll", cl => {\n      const entities = this.locateAll(cl);\n      return entities.map(entity => {\n        return {\n          entity,\n          component: entity.components.get(cl)\n        };\n      });\n    });\n\n    World_defineProperty(this, "get", (eid, cl) => {\n      const cc = this.componentCollections.get(eid) || new ComponentCollection_ComponentCollection();\n      return cc.get(cl);\n    });\n\n    World_defineProperty(this, "getComponent", (cl, defaultValue) => {\n      const result = this.grab(cl);\n\n      if (!result) {\n        return defaultValue ? defaultValue : null;\n      }\n\n      return result.component;\n    });\n\n    World_defineProperty(this, "getTagged", tag => {\n      const tagEntityIds = this.entitiesByTags.get(tag);\n\n      if (tagEntityIds) {\n        const entityId = tagEntityIds.values().next().value;\n        const entity = this.entities.get(entityId);\n\n        if (entity) {\n          return entity;\n        }\n      }\n\n      return null;\n    });\n\n    World_defineProperty(this, "getAllTagged", tag => {\n      let entities = []; // eslint-disable-line\n\n      const tagEntityIds = this.entitiesByTags.get(tag);\n\n      if (tagEntityIds) {\n        for (const entityId of tagEntityIds) {\n          const entity = this.entities.get(entityId);\n\n          if (entity) {\n            entities.push(entity);\n          }\n        }\n      }\n\n      return entities;\n    });\n\n    World_defineProperty(this, "set", (eid, component) => {\n      const cc = this.componentCollections.get(eid) || new ComponentCollection_ComponentCollection();\n      cc.add(component);\n      this.componentCollections.set(eid, cc);\n\n      for (const [ctArr, entitySet] of this.entitiesByCTypes) {\n        if (ctArr.every(cc.hasByName)) {\n          entitySet.add(eid);\n        }\n      }\n\n      return this;\n    });\n\n    World_defineProperty(this, "remove", (eid, cType) => {\n      const cc = this.componentCollections.get(eid) || new ComponentCollection_ComponentCollection(); // remove entity from current entitiesByCTypes\n\n      for (const [ctArr, entitySet] of this.entitiesByCTypes) {\n        if (ctArr.every(cc.hasByName)) {\n          entitySet.delete(eid);\n        }\n      }\n\n      cc.remove(cType); // Move entityId to new CTypes if needed.\n\n      for (const [ctArr, entitySet] of this.entitiesByCTypes) {\n        if (ctArr.every(cc.hasByName)) {\n          entitySet.add(eid);\n        }\n      }\n\n      return this;\n    });\n  }\n\n  /**\n   * Internal method used in setting up a new system.\n   */\n  registerSystem(cNames) {\n    this.entitiesByCTypes.set(cNames, new Set());\n    return this;\n  }\n  /**\n   * an alias for createSystem().\n   */\n\n\n  createSystem(cl, systemFunc) {\n    const system = createSystem(this, cl, systemFunc);\n    return system;\n  }\n\n  registerEntity(entity) {\n    const cc = new ComponentCollection_ComponentCollection();\n    this.componentCollections.set(entity.id, cc);\n    this.entities.set(entity.id, entity);\n    return this;\n  }\n  /**\n   * Remove all components that belong to an entity.\n   */\n\n\n  clearEntityComponents(eid) {\n    this.componentCollections.set(eid, new ComponentCollection_ComponentCollection());\n\n    for (const entitySet of this.entitiesByCTypes.values()) {\n      if (entitySet.has(eid)) {\n        entitySet.delete(eid);\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Create an entity that is in the world.\n   * Basically just new Entity(world), but saves an import of Entity.\n   */\n\n\n  createEntity() {\n    const entity = new Entity_Entity(this);\n    return entity;\n  }\n  /**\n   * Destroys an entity.\n   * Same as entity.destroy().\n   */\n\n\n  destroyEntity(eid) {\n    this.componentCollections.delete(eid);\n    this.entities.delete(eid);\n\n    for (const entitySet of this.entitiesByCTypes.values()) {\n      if (entitySet.has(eid)) {\n        entitySet.delete(eid);\n      }\n    } // remove any tag associations with destroyed entities.\n\n\n    for (const [tag, entitySet] of this.entitiesByTags) {\n      if (entitySet.has(eid)) {\n        entitySet.delete(eid);\n      }\n\n      if (entitySet.size === 0) {\n        this.entitiesByTags.delete(tag);\n      }\n    }\n\n    return this;\n  }\n\n}\n// CONCATENATED MODULE: ./src/index.ts\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')}])}));