!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define("ecstatic",[],n):"object"==typeof exports?exports.ecstatic=n():e.ecstatic=n()}(window,(function(){return function(e){var n=window.webpackHotUpdateecstatic;window.webpackHotUpdateecstatic=function(e,t){!function(e,n){if(!y[e]||!a[e])return;for(var t in a[e]=!1,n)Object.prototype.hasOwnProperty.call(n,t)&&(g[t]=n[t]);0==--G&&0===u&&Z()}(e,t),n&&n(e,t)};var t,Q=!0,B="5515f6dc1f86eaeb2711",c={},i=[],s=[];function l(e){var n=E[e];if(!n)return m;var Q=function(Q){return n.hot.active?(E[Q]?-1===E[Q].parents.indexOf(e)&&E[Q].parents.push(e):(i=[e],t=Q),-1===n.children.indexOf(Q)&&n.children.push(Q)):(console.warn("[HMR] unexpected require("+Q+") from disposed module "+e),i=[]),m(Q)},B=function(e){return{configurable:!0,enumerable:!0,get:function(){return m[e]},set:function(n){m[e]=n}}};for(var c in m)Object.prototype.hasOwnProperty.call(m,c)&&"e"!==c&&"t"!==c&&Object.defineProperty(Q,c,B(c));return Q.e=function(e){return"ready"===I&&o("prepare"),u++,m.e(e).then(n,(function(e){throw n(),e}));function n(){u--,"prepare"===I&&(r[e]||p(e),0===u&&0===G&&Z())}},Q.t=function(e,n){return 1&n&&(e=Q(e)),m.t(e,-2&n)},Q}function d(n){var Q={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:t!==n,active:!0,accept:function(e,n){if(void 0===e)Q._selfAccepted=!0;else if("function"==typeof e)Q._selfAccepted=e;else if("object"==typeof e)for(var t=0;t<e.length;t++)Q._acceptedDependencies[e[t]]=n||function(){};else Q._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)Q._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)Q._declinedDependencies[e[n]]=!0;else Q._declinedDependencies[e]=!0},dispose:function(e){Q._disposeHandlers.push(e)},addDisposeHandler:function(e){Q._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=Q._disposeHandlers.indexOf(e);n>=0&&Q._disposeHandlers.splice(n,1)},invalidate:function(){switch(this._selfInvalidated=!0,I){case"idle":(g={})[n]=e[n],o("ready");break;case"ready":L(n);break;case"prepare":case"check":case"dispose":case"apply":(C=C||[]).push(n)}},check:x,apply:V,status:function(e){if(!e)return I;F.push(e)},addStatusHandler:function(e){F.push(e)},removeStatusHandler:function(e){var n=F.indexOf(e);n>=0&&F.splice(n,1)},data:c[n]};return t=void 0,Q}var F=[],I="idle";function o(e){I=e;for(var n=0;n<F.length;n++)F[n].call(null,e)}var U,g,b,C,G=0,u=0,r={},a={},y={};function X(e){return+e+""===e?+e:e}function x(e){if("idle"!==I)throw new Error("check() is only allowed in idle status");return Q=e,o("check"),(n=1e4,n=n||1e4,new Promise((function(e,t){if("undefined"==typeof XMLHttpRequest)return t(new Error("No browser support"));try{var Q=new XMLHttpRequest,B=m.p+"hot/hot-update.json";Q.open("GET",B,!0),Q.timeout=n,Q.send(null)}catch(e){return t(e)}Q.onreadystatechange=function(){if(4===Q.readyState)if(0===Q.status)t(new Error("Manifest request to "+B+" timed out."));else if(404===Q.status)e();else if(200!==Q.status&&304!==Q.status)t(new Error("Manifest request to "+B+" failed."));else{try{var n=JSON.parse(Q.responseText)}catch(e){return void t(e)}e(n)}}}))).then((function(e){if(!e)return o(R()?"ready":"idle"),null;a={},r={},y=e.c,b=e.h,o("prepare");var n=new Promise((function(e,n){U={resolve:e,reject:n}}));g={};return p(0),"prepare"===I&&0===u&&0===G&&Z(),n}));var n}function p(e){var n;y[e]?(a[e]=!0,G++,(n=document.createElement("script")).charset="utf-8",n.src=m.p+"hot/hot-update.js",document.head.appendChild(n)):r[e]=!0}function Z(){o("ready");var e=U;if(U=null,e)if(Q)Promise.resolve().then((function(){return V(Q)})).then((function(n){e.resolve(n)}),(function(n){e.reject(n)}));else{var n=[];for(var t in g)Object.prototype.hasOwnProperty.call(g,t)&&n.push(X(t));e.resolve(n)}}function V(n){if("ready"!==I)throw new Error("apply() is only allowed in ready status");return function n(Q){var s,l,d,F,I;function U(e){for(var n=[e],t={},Q=n.map((function(e){return{chain:[e],id:e}}));Q.length>0;){var B=Q.pop(),c=B.id,i=B.chain;if((F=E[c])&&(!F.hot._selfAccepted||F.hot._selfInvalidated)){if(F.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:c};if(F.hot._main)return{type:"unaccepted",chain:i,moduleId:c};for(var s=0;s<F.parents.length;s++){var l=F.parents[s],d=E[l];if(d){if(d.hot._declinedDependencies[c])return{type:"declined",chain:i.concat([l]),moduleId:c,parentId:l};-1===n.indexOf(l)&&(d.hot._acceptedDependencies[c]?(t[l]||(t[l]=[]),G(t[l],[c])):(delete t[l],n.push(l),Q.push({chain:i.concat([l]),id:l})))}}}}return{type:"accepted",moduleId:e,outdatedModules:n,outdatedDependencies:t}}function G(e,n){for(var t=0;t<n.length;t++){var Q=n[t];-1===e.indexOf(Q)&&e.push(Q)}}R();var u={},r=[],a={},x=function(){console.warn("[HMR] unexpected require("+Z.moduleId+") to disposed module")};for(var p in g)if(Object.prototype.hasOwnProperty.call(g,p)){var Z;I=X(p),Z=g[p]?U(I):{type:"disposed",moduleId:p};var V=!1,L=!1,N=!1,A="";switch(Z.chain&&(A="\nUpdate propagation: "+Z.chain.join(" -> ")),Z.type){case"self-declined":Q.onDeclined&&Q.onDeclined(Z),Q.ignoreDeclined||(V=new Error("Aborted because of self decline: "+Z.moduleId+A));break;case"declined":Q.onDeclined&&Q.onDeclined(Z),Q.ignoreDeclined||(V=new Error("Aborted because of declined dependency: "+Z.moduleId+" in "+Z.parentId+A));break;case"unaccepted":Q.onUnaccepted&&Q.onUnaccepted(Z),Q.ignoreUnaccepted||(V=new Error("Aborted because "+I+" is not accepted"+A));break;case"accepted":Q.onAccepted&&Q.onAccepted(Z),L=!0;break;case"disposed":Q.onDisposed&&Q.onDisposed(Z),N=!0;break;default:throw new Error("Unexception type "+Z.type)}if(V)return o("abort"),Promise.reject(V);if(L)for(I in a[I]=g[I],G(r,Z.outdatedModules),Z.outdatedDependencies)Object.prototype.hasOwnProperty.call(Z.outdatedDependencies,I)&&(u[I]||(u[I]=[]),G(u[I],Z.outdatedDependencies[I]));N&&(G(r,[Z.moduleId]),a[I]=x)}var W,h=[];for(l=0;l<r.length;l++)I=r[l],E[I]&&E[I].hot._selfAccepted&&a[I]!==x&&!E[I].hot._selfInvalidated&&h.push({module:I,parents:E[I].parents.slice(),errorHandler:E[I].hot._selfAccepted});o("dispose"),Object.keys(y).forEach((function(e){!1===y[e]&&function(e){delete installedChunks[e]}(e)}));var D,S,v=r.slice();for(;v.length>0;)if(I=v.pop(),F=E[I]){var f={},H=F.hot._disposeHandlers;for(d=0;d<H.length;d++)(s=H[d])(f);for(c[I]=f,F.hot.active=!1,delete E[I],delete u[I],d=0;d<F.children.length;d++){var J=E[F.children[d]];J&&((W=J.parents.indexOf(I))>=0&&J.parents.splice(W,1))}}for(I in u)if(Object.prototype.hasOwnProperty.call(u,I)&&(F=E[I]))for(S=u[I],d=0;d<S.length;d++)D=S[d],(W=F.children.indexOf(D))>=0&&F.children.splice(W,1);o("apply"),void 0!==b&&(B=b,b=void 0);for(I in g=void 0,a)Object.prototype.hasOwnProperty.call(a,I)&&(e[I]=a[I]);var T=null;for(I in u)if(Object.prototype.hasOwnProperty.call(u,I)&&(F=E[I])){S=u[I];var Y=[];for(l=0;l<S.length;l++)if(D=S[l],s=F.hot._acceptedDependencies[D]){if(-1!==Y.indexOf(s))continue;Y.push(s)}for(l=0;l<Y.length;l++){s=Y[l];try{s(S)}catch(e){Q.onErrored&&Q.onErrored({type:"accept-errored",moduleId:I,dependencyId:S[l],error:e}),Q.ignoreErrored||T||(T=e)}}}for(l=0;l<h.length;l++){var w=h[l];I=w.module,i=w.parents,t=I;try{m(I)}catch(e){if("function"==typeof w.errorHandler)try{w.errorHandler(e)}catch(n){Q.onErrored&&Q.onErrored({type:"self-accept-error-handler-errored",moduleId:I,error:n,originalError:e}),Q.ignoreErrored||T||(T=n),T||(T=e)}else Q.onErrored&&Q.onErrored({type:"self-accept-errored",moduleId:I,error:e}),Q.ignoreErrored||T||(T=e)}}if(T)return o("fail"),Promise.reject(T);if(C)return n(Q).then((function(e){return r.forEach((function(n){e.indexOf(n)<0&&e.push(n)})),e}));return o("idle"),new Promise((function(e){e(r)}))}(n=n||{})}function R(){if(C)return g||(g={}),C.forEach(L),C=void 0,!0}function L(n){Object.prototype.hasOwnProperty.call(g,n)||(g[n]=e[n])}var E={};function m(n){if(E[n])return E[n].exports;var t=E[n]={i:n,l:!1,exports:{},hot:d(n),parents:(s=i,i=[],s),children:[]};return e[n].call(t.exports,t,t.exports,l(n)),t.l=!0,t.exports}return m.m=e,m.c=E,m.d=function(e,n,t){m.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},m.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},m.t=function(e,n){if(1&n&&(e=m(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(m.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var Q in e)m.d(t,Q,function(n){return e[n]}.bind(null,Q));return t},m.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return m.d(n,"a",n),n},m.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},m.p="/static/",m.h=function(){return B},l(0)(m.s=0)}([function(e,n,t){e.exports=t(1)},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, "World", function() { return /* reexport */ World_World; });\n__webpack_require__.d(__webpack_exports__, "createEntity", function() { return /* reexport */ createEntity; });\n__webpack_require__.d(__webpack_exports__, "createSystem", function() { return /* reexport */ createSystem; });\n\n// CONCATENATED MODULE: ./src/ComponentCollection.ts\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nclass ComponentCollection {\n  constructor() {\n    _defineProperty(this, "components", new Map());\n\n    _defineProperty(this, "add", component => {\n      this.components.set(component.type, component);\n    });\n\n    _defineProperty(this, "update", (cType, func) => {\n      if (this.components.has(cType)) {\n        const c = this.components.get(cType);\n\n        if (c) {\n          const updatedComponent = func(c);\n          this.components.set(cType, updatedComponent);\n        }\n      }\n    });\n\n    _defineProperty(this, "remove", cType => {\n      this.components.delete(cType);\n    });\n\n    _defineProperty(this, "get", cType => {\n      if (!this.components.has(cType)) {\n        throw new Error(`ComponentCollection does not have component of type ${cType}`);\n      }\n\n      return this.components.get(cType);\n    });\n\n    _defineProperty(this, "has", cType => {\n      if (Array.isArray(cType)) {\n        return cType.every(ct => this.components.has(ct) === true);\n      } else {\n        return this.components.has(cType);\n      }\n    });\n  }\n\n  get componentTypes() {\n    return [...this.components.keys()];\n  }\n\n  get size() {\n    return this.components.size;\n  }\n\n}\n// CONCATENATED MODULE: ./src/World.ts\nfunction World_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nclass World_World {\n  constructor() {\n    World_defineProperty(this, "componentCollections", new Map());\n\n    World_defineProperty(this, "entities", new Map());\n\n    World_defineProperty(this, "entitiesByCTypes", new Map());\n\n    World_defineProperty(this, "find", predicate => {\n      for (const entity of this.entities.values()) {\n        if (predicate(entity)) {\n          return entity;\n        }\n      }\n\n      return null;\n    });\n\n    World_defineProperty(this, "findAll", predicate => {\n      const results = [];\n\n      for (const entity of this.entities.values()) {\n        if (predicate(entity)) {\n          results.push(entity);\n        }\n      }\n\n      return results;\n    });\n\n    World_defineProperty(this, "locate", cTypes => {\n      for (const entity of this.entities.values()) {\n        if (entity.components.has(cTypes)) {\n          return entity;\n        }\n      }\n\n      return null;\n    });\n\n    World_defineProperty(this, "locateAll", cTypes => {\n      const results = [];\n\n      for (const entity of this.entities.values()) {\n        if (entity.components.has(cTypes)) {\n          results.push(entity);\n        }\n      }\n\n      return results;\n    });\n\n    World_defineProperty(this, "grab", cType => {\n      const entity = this.locate(cType);\n\n      if (entity) {\n        const cc = this.componentCollections.get(entity.id) || new ComponentCollection();\n        const component = cc.get(cType);\n        return {\n          entity,\n          component\n        };\n      }\n\n      return null;\n    });\n\n    World_defineProperty(this, "grabBy", (cType, predicate) => {\n      const entities = this.locateAll(cType);\n\n      for (const entity of entities) {\n        const cc = this.componentCollections.get(entity.id) || new ComponentCollection();\n        const component = cc.get(cType);\n\n        if (predicate(component)) {\n          return {\n            component,\n            entity\n          };\n        }\n      }\n\n      return null;\n    });\n\n    World_defineProperty(this, "grabAll", cType => {\n      return this.locateAll(cType).map(entity => ({\n        entity,\n        component: entity.components.get(cType)\n      }));\n    });\n\n    World_defineProperty(this, "get", (eid, cType) => {\n      const cc = this.componentCollections.get(eid) || new ComponentCollection();\n      return cc.get(cType);\n    });\n\n    World_defineProperty(this, "set", (eid, component) => {\n      const cc = this.componentCollections.get(eid) || new ComponentCollection();\n      cc.add(component);\n      this.componentCollections.set(eid, cc);\n\n      for (const [ctArr, entitySet] of this.entitiesByCTypes) {\n        if (ctArr.every(cc.has)) {\n          entitySet.add(eid);\n        }\n      }\n\n      return this;\n    });\n\n    World_defineProperty(this, "remove", (eid, cType) => {\n      const cc = this.componentCollections.get(eid) || new ComponentCollection(); // remove entity from current entitiesByCTypes\n\n      for (const [ctArr, entitySet] of this.entitiesByCTypes) {\n        if (ctArr.every(cc.has)) {\n          entitySet.delete(eid);\n        }\n      }\n\n      cc.remove(cType); // Move entityId to new CTypes if needed.\n\n      for (const [ctArr, entitySet] of this.entitiesByCTypes) {\n        if (ctArr.every(cc.has)) {\n          entitySet.add(eid);\n        }\n      }\n    });\n  }\n\n  /**\n   * Internal method used in setting up a new system.\n   */\n  registerSystem(cTypes) {\n    this.entitiesByCTypes.set(cTypes, new Set());\n    return this;\n  }\n\n  registerEntity(entity) {\n    const cc = new ComponentCollection();\n    this.componentCollections.set(entity.id, cc);\n    this.entities.set(entity.id, entity);\n    return this;\n  }\n  /**\n   * Remove all components that belong to an entity.\n   */\n\n\n  clearEntityComponents(eid) {\n    this.componentCollections.set(eid, new ComponentCollection());\n\n    for (const entitySet of this.entitiesByCTypes.values()) {\n      if (entitySet.has(eid)) {\n        entitySet.delete(eid);\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Destroys an entity.\n   * Same as entity.destroy().\n   */\n\n\n  destroyEntity(eid) {\n    this.componentCollections.delete(eid);\n    this.entities.delete(eid);\n\n    for (const entitySet of this.entitiesByCTypes.values()) {\n      if (entitySet.has(eid)) {\n        entitySet.delete(eid);\n      }\n    }\n\n    return this;\n  }\n\n}\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/rng.js\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nvar getRandomValues = typeof crypto !== \'undefined\' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== \'undefined\' && typeof msCrypto.getRandomValues === \'function\' && msCrypto.getRandomValues.bind(msCrypto);\nvar rnds8 = new Uint8Array(16);\nfunction rng() {\n  if (!getRandomValues) {\n    throw new Error(\'crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported\');\n  }\n\n  return getRandomValues(rnds8);\n}\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/bytesToUuid.js\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\n\nfor (var bytesToUuid_i = 0; bytesToUuid_i < 256; ++bytesToUuid_i) {\n  byteToHex.push((bytesToUuid_i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset_) {\n  var offset = offset_ || 0; // Note: Be careful editing this code!  It\'s been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (byteToHex[buf[offset + 0]] + byteToHex[buf[offset + 1]] + byteToHex[buf[offset + 2]] + byteToHex[buf[offset + 3]] + \'-\' + byteToHex[buf[offset + 4]] + byteToHex[buf[offset + 5]] + \'-\' + byteToHex[buf[offset + 6]] + byteToHex[buf[offset + 7]] + \'-\' + byteToHex[buf[offset + 8]] + byteToHex[buf[offset + 9]] + \'-\' + byteToHex[buf[offset + 10]] + byteToHex[buf[offset + 11]] + byteToHex[buf[offset + 12]] + byteToHex[buf[offset + 13]] + byteToHex[buf[offset + 14]] + byteToHex[buf[offset + 15]]).toLowerCase();\n}\n\n/* harmony default export */ var esm_browser_bytesToUuid = (bytesToUuid);\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/v4.js\n\n\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return esm_browser_bytesToUuid(rnds);\n}\n\n/* harmony default export */ var esm_browser_v4 = (v4);\n// CONCATENATED MODULE: ./src/Entity.ts\nfunction Entity_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nclass Entity_Entity {\n  constructor(world) {\n    Entity_defineProperty(this, "_id", void 0);\n\n    Entity_defineProperty(this, "_world", void 0);\n\n    this._id = esm_browser_v4();\n    this._world = world;\n    /*\n    Registering with the World.\n    */\n\n    this._world.registerEntity(this);\n  }\n  /**\n   * Add a component to an Entity, doh.\n   */\n\n\n  add(component) {\n    this._world.set(this._id, component);\n\n    return this;\n  }\n  /**\n   * Determines if an entity has a component related to it.\n   */\n\n\n  has(cType) {\n    const cc = this._world.componentCollections.get(this._id) || new ComponentCollection();\n    return cc.has(cType);\n  }\n  /**\n   * Get a component that belongs to an entity.\n   */\n\n\n  get(cType) {\n    const cc = this._world.componentCollections.get(this._id) || new ComponentCollection();\n    const component = cc.get(cType);\n    return component;\n  }\n  /**\n   * Get all components that have been added to an entity, via a ComponentCollection\n   */\n\n\n  getAll() {\n    return this._world.componentCollections.get(this._id) || new ComponentCollection();\n  }\n  /**\n   * Get all components that have been added to an entity, via a ComponentCollection.\n   * Does the same thing as entityInstance.getAll().\n   */\n\n\n  get components() {\n    return this._world.componentCollections.get(this._id) || new ComponentCollection();\n  }\n\n  remove(cType) {\n    this._world.remove(this._id, cType);\n\n    return this;\n  }\n  /** Clears all components from an Entity */\n\n\n  clear() {\n    this._world.clearEntityComponents(this._id);\n\n    return this;\n  }\n\n  destroy() {\n    this._world.destroyEntity(this._id);\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get world() {\n    return this._world;\n  }\n\n}\nfunction createEntity(world) {\n  const entity = new Entity_Entity(world);\n  return entity;\n}\n// CONCATENATED MODULE: ./src/System.ts\n\n\n\n/**\n * This is how you create a System.\n * @example\n * ```\n * createSystem(world, [\'ComponentType\'], ({ entity }) => \'Do fun system things here.\')\n * ```\n */\nfunction createSystem(world, cTypes, systemFunc) {\n  world.registerSystem(cTypes);\n  return () => {\n    let index = 0;\n    const size = world.entitiesByCTypes.size; // Used for matching the array of ComponentTypes which is the key\n    // of where the ComponentCollection is, with the array of ComponentTypes\n    // that are passes.\n    // Might be nice in the future to go back to a ref check on cTypes, but\n    // for now this doesn\'t seem to be that much of a perf hit.\n    // for (const ct of world.entitiesByCTypes.keys()) {\n    //   if (cTypes.length === ct.length && cTypes.every(c => ct.includes(c))) {\n    //     for (const eid of world.entitiesByCTypes.get(cTypes)) {\n    //       const args: SystemFuncArgs<CT> = {\n    //         entity: world.entities.get(eid),\n    //         components: world.componentCollections.get(eid),\n    //         world,\n    //         index,\n    //         size,\n    //         isFirst: index === 0,\n    //         isLast: index + 1 === size,\n    //       }\n    //       systemFunc(args);\n    //       index += 1;\n    //     }\n    //   }\n    // }\n\n    const cTypeArrs = world.entitiesByCTypes.get(cTypes) || new Set();\n\n    for (const eid of cTypeArrs) {\n      const args = {\n        entity: world.entities.get(eid) || new Entity_Entity(world),\n        components: world.componentCollections.get(eid) || new ComponentCollection(),\n        world,\n        index,\n        size,\n        isFirst: index === 0,\n        isLast: index + 1 === size\n      };\n      systemFunc(args);\n      index += 1;\n    }\n  };\n}\n// CONCATENATED MODULE: ./src/index.ts\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')}])}));