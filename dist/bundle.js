!function(Q,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define("ecstatic",[],n):"object"==typeof exports?exports.ecstatic=n():Q.ecstatic=n()}(window,(function(){return function(Q){var n=window.webpackHotUpdateecstatic;window.webpackHotUpdateecstatic=function(Q,e){!function(Q,n){if(!a[Q]||!y[Q])return;for(var e in y[Q]=!1,n)Object.prototype.hasOwnProperty.call(n,e)&&(b[e]=n[e]);0==--G&&0===u&&X()}(Q,e),n&&n(Q,e)};var e,t=!0,B="e218ee2da26e10e836b0",i={},F=[],s=[];function c(Q){var n=E[Q];if(!n)return N;var t=function(t){return n.hot.active?(E[t]?-1===E[t].parents.indexOf(Q)&&E[t].parents.push(Q):(F=[Q],e=t),-1===n.children.indexOf(t)&&n.children.push(t)):(console.warn("[HMR] unexpected require("+t+") from disposed module "+Q),F=[]),N(t)},B=function(Q){return{configurable:!0,enumerable:!0,get:function(){return N[Q]},set:function(n){N[Q]=n}}};for(var i in N)Object.prototype.hasOwnProperty.call(N,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(t,i,B(i));return t.e=function(Q){return"ready"===l&&I("prepare"),u++,N.e(Q).then(n,(function(Q){throw n(),Q}));function n(){u--,"prepare"===l&&(r[Q]||p(Q),0===u&&0===G&&X())}},t.t=function(Q,n){return 1&n&&(Q=t(Q)),N.t(Q,-2&n)},t}function U(n){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:e!==n,active:!0,accept:function(Q,n){if(void 0===Q)t._selfAccepted=!0;else if("function"==typeof Q)t._selfAccepted=Q;else if("object"==typeof Q)for(var e=0;e<Q.length;e++)t._acceptedDependencies[Q[e]]=n||function(){};else t._acceptedDependencies[Q]=n||function(){}},decline:function(Q){if(void 0===Q)t._selfDeclined=!0;else if("object"==typeof Q)for(var n=0;n<Q.length;n++)t._declinedDependencies[Q[n]]=!0;else t._declinedDependencies[Q]=!0},dispose:function(Q){t._disposeHandlers.push(Q)},addDisposeHandler:function(Q){t._disposeHandlers.push(Q)},removeDisposeHandler:function(Q){var n=t._disposeHandlers.indexOf(Q);n>=0&&t._disposeHandlers.splice(n,1)},invalidate:function(){switch(this._selfInvalidated=!0,l){case"idle":(b={})[n]=Q[n],I("ready");break;case"ready":R(n);break;case"prepare":case"check":case"dispose":case"apply":(C=C||[]).push(n)}},check:x,apply:Z,status:function(Q){if(!Q)return l;d.push(Q)},addStatusHandler:function(Q){d.push(Q)},removeStatusHandler:function(Q){var n=d.indexOf(Q);n>=0&&d.splice(n,1)},data:i[n]};return e=void 0,t}var d=[],l="idle";function I(Q){l=Q;for(var n=0;n<d.length;n++)d[n].call(null,Q)}var g,b,o,C,G=0,u=0,r={},y={},a={};function V(Q){return+Q+""===Q?+Q:Q}function x(Q){if("idle"!==l)throw new Error("check() is only allowed in idle status");return t=Q,I("check"),(n=1e4,n=n||1e4,new Promise((function(Q,e){if("undefined"==typeof XMLHttpRequest)return e(new Error("No browser support"));try{var t=new XMLHttpRequest,B=N.p+"hot/hot-update.json";t.open("GET",B,!0),t.timeout=n,t.send(null)}catch(Q){return e(Q)}t.onreadystatechange=function(){if(4===t.readyState)if(0===t.status)e(new Error("Manifest request to "+B+" timed out."));else if(404===t.status)Q();else if(200!==t.status&&304!==t.status)e(new Error("Manifest request to "+B+" failed."));else{try{var n=JSON.parse(t.responseText)}catch(Q){return void e(Q)}Q(n)}}}))).then((function(Q){if(!Q)return I(L()?"ready":"idle"),null;y={},r={},a=Q.c,o=Q.h,I("prepare");var n=new Promise((function(Q,n){g={resolve:Q,reject:n}}));b={};return p(0),"prepare"===l&&0===u&&0===G&&X(),n}));var n}function p(Q){var n;a[Q]?(y[Q]=!0,G++,(n=document.createElement("script")).charset="utf-8",n.src=N.p+"hot/hot-update.js",document.head.appendChild(n)):r[Q]=!0}function X(){I("ready");var Q=g;if(g=null,Q)if(t)Promise.resolve().then((function(){return Z(t)})).then((function(n){Q.resolve(n)}),(function(n){Q.reject(n)}));else{var n=[];for(var e in b)Object.prototype.hasOwnProperty.call(b,e)&&n.push(V(e));Q.resolve(n)}}function Z(n){if("ready"!==l)throw new Error("apply() is only allowed in ready status");return function n(t){var s,c,U,d,l;function g(Q){for(var n=[Q],e={},t=n.map((function(Q){return{chain:[Q],id:Q}}));t.length>0;){var B=t.pop(),i=B.id,F=B.chain;if((d=E[i])&&(!d.hot._selfAccepted||d.hot._selfInvalidated)){if(d.hot._selfDeclined)return{type:"self-declined",chain:F,moduleId:i};if(d.hot._main)return{type:"unaccepted",chain:F,moduleId:i};for(var s=0;s<d.parents.length;s++){var c=d.parents[s],U=E[c];if(U){if(U.hot._declinedDependencies[i])return{type:"declined",chain:F.concat([c]),moduleId:i,parentId:c};-1===n.indexOf(c)&&(U.hot._acceptedDependencies[i]?(e[c]||(e[c]=[]),G(e[c],[i])):(delete e[c],n.push(c),t.push({chain:F.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:Q,outdatedModules:n,outdatedDependencies:e}}function G(Q,n){for(var e=0;e<n.length;e++){var t=n[e];-1===Q.indexOf(t)&&Q.push(t)}}L();var u={},r=[],y={},x=function(){console.warn("[HMR] unexpected require("+X.moduleId+") to disposed module")};for(var p in b)if(Object.prototype.hasOwnProperty.call(b,p)){var X;l=V(p),X=b[p]?g(l):{type:"disposed",moduleId:p};var Z=!1,R=!1,A=!1,m="";switch(X.chain&&(m="\nUpdate propagation: "+X.chain.join(" -> ")),X.type){case"self-declined":t.onDeclined&&t.onDeclined(X),t.ignoreDeclined||(Z=new Error("Aborted because of self decline: "+X.moduleId+m));break;case"declined":t.onDeclined&&t.onDeclined(X),t.ignoreDeclined||(Z=new Error("Aborted because of declined dependency: "+X.moduleId+" in "+X.parentId+m));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(X),t.ignoreUnaccepted||(Z=new Error("Aborted because "+l+" is not accepted"+m));break;case"accepted":t.onAccepted&&t.onAccepted(X),R=!0;break;case"disposed":t.onDisposed&&t.onDisposed(X),A=!0;break;default:throw new Error("Unexception type "+X.type)}if(Z)return I("abort"),Promise.reject(Z);if(R)for(l in y[l]=b[l],G(r,X.outdatedModules),X.outdatedDependencies)Object.prototype.hasOwnProperty.call(X.outdatedDependencies,l)&&(u[l]||(u[l]=[]),G(u[l],X.outdatedDependencies[l]));A&&(G(r,[X.moduleId]),y[l]=x)}var W,h=[];for(c=0;c<r.length;c++)l=r[c],E[l]&&E[l].hot._selfAccepted&&y[l]!==x&&!E[l].hot._selfInvalidated&&h.push({module:l,parents:E[l].parents.slice(),errorHandler:E[l].hot._selfAccepted});I("dispose"),Object.keys(a).forEach((function(Q){!1===a[Q]&&function(Q){delete installedChunks[Q]}(Q)}));var D,S,H=r.slice();for(;H.length>0;)if(l=H.pop(),d=E[l]){var v={},f=d.hot._disposeHandlers;for(U=0;U<f.length;U++)(s=f[U])(v);for(i[l]=v,d.hot.active=!1,delete E[l],delete u[l],U=0;U<d.children.length;U++){var Y=E[d.children[U]];Y&&((W=Y.parents.indexOf(l))>=0&&Y.parents.splice(W,1))}}for(l in u)if(Object.prototype.hasOwnProperty.call(u,l)&&(d=E[l]))for(S=u[l],U=0;U<S.length;U++)D=S[U],(W=d.children.indexOf(D))>=0&&d.children.splice(W,1);I("apply"),void 0!==o&&(B=o,o=void 0);for(l in b=void 0,y)Object.prototype.hasOwnProperty.call(y,l)&&(Q[l]=y[l]);var T=null;for(l in u)if(Object.prototype.hasOwnProperty.call(u,l)&&(d=E[l])){S=u[l];var J=[];for(c=0;c<S.length;c++)if(D=S[c],s=d.hot._acceptedDependencies[D]){if(-1!==J.indexOf(s))continue;J.push(s)}for(c=0;c<J.length;c++){s=J[c];try{s(S)}catch(Q){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:l,dependencyId:S[c],error:Q}),t.ignoreErrored||T||(T=Q)}}}for(c=0;c<h.length;c++){var z=h[c];l=z.module,F=z.parents,e=l;try{N(l)}catch(Q){if("function"==typeof z.errorHandler)try{z.errorHandler(Q)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:l,error:n,originalError:Q}),t.ignoreErrored||T||(T=n),T||(T=Q)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:l,error:Q}),t.ignoreErrored||T||(T=Q)}}if(T)return I("fail"),Promise.reject(T);if(C)return n(t).then((function(Q){return r.forEach((function(n){Q.indexOf(n)<0&&Q.push(n)})),Q}));return I("idle"),new Promise((function(Q){Q(r)}))}(n=n||{})}function L(){if(C)return b||(b={}),C.forEach(R),C=void 0,!0}function R(n){Object.prototype.hasOwnProperty.call(b,n)||(b[n]=Q[n])}var E={};function N(n){if(E[n])return E[n].exports;var e=E[n]={i:n,l:!1,exports:{},hot:U(n),parents:(s=F,F=[],s),children:[]};return Q[n].call(e.exports,e,e.exports,c(n)),e.l=!0,e.exports}return N.m=Q,N.c=E,N.d=function(Q,n,e){N.o(Q,n)||Object.defineProperty(Q,n,{enumerable:!0,get:e})},N.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},N.t=function(Q,n){if(1&n&&(Q=N(Q)),8&n)return Q;if(4&n&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var e=Object.create(null);if(N.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:Q}),2&n&&"string"!=typeof Q)for(var t in Q)N.d(e,t,function(n){return Q[n]}.bind(null,t));return e},N.n=function(Q){var n=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return N.d(n,"a",n),n},N.o=function(Q,n){return Object.prototype.hasOwnProperty.call(Q,n)},N.p="/static/",N.h=function(){return B},c(0)(N.s=0)}([function(Q,n,e){Q.exports=e(1)},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, "World", function() { return /* reexport */ World_World; });\n__webpack_require__.d(__webpack_exports__, "createEntity", function() { return /* reexport */ createEntity; });\n__webpack_require__.d(__webpack_exports__, "createSystem", function() { return /* reexport */ createSystem; });\n\n// CONCATENATED MODULE: ./src/ComponentCollection.ts\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nclass ComponentCollection {\n  constructor() {\n    _defineProperty(this, "components", new Map());\n\n    _defineProperty(this, "add", component => {\n      this.components.set(component.type, component);\n    });\n\n    _defineProperty(this, "update", (cType, func) => {\n      if (this.components.has(cType)) {\n        const c = this.components.get(cType);\n\n        if (c) {\n          const updatedComponent = func(c);\n          this.components.set(cType, updatedComponent);\n        }\n      }\n    });\n\n    _defineProperty(this, "remove", cType => {\n      this.components.delete(cType);\n    });\n\n    _defineProperty(this, "get", cType => {\n      if (!this.components.has(cType)) {\n        throw new Error(`ComponentCollection does not have component of type ${cType}`);\n      }\n\n      return this.components.get(cType);\n    });\n\n    _defineProperty(this, "has", cType => {\n      if (Array.isArray(cType)) {\n        return cType.every(ct => this.components.has(ct) === true);\n      } else {\n        return this.components.has(cType);\n      }\n    });\n  }\n\n  get componentTypes() {\n    return [...this.components.keys()];\n  }\n\n  get size() {\n    return this.components.size;\n  }\n\n}\n// CONCATENATED MODULE: ./src/World.ts\nfunction World_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\nclass World_World {\n  constructor() {\n    World_defineProperty(this, "componentCollections", new Map());\n\n    World_defineProperty(this, "entities", new Map());\n\n    World_defineProperty(this, "entitiesByCTypes", new Map());\n\n    World_defineProperty(this, "entitiesByTags", new Map());\n\n    World_defineProperty(this, "find", predicate => {\n      for (const entity of this.entities.values()) {\n        if (predicate(entity)) {\n          return entity;\n        }\n      }\n\n      return null;\n    });\n\n    World_defineProperty(this, "findAll", predicate => {\n      const results = [];\n\n      for (const entity of this.entities.values()) {\n        if (predicate(entity)) {\n          results.push(entity);\n        }\n      }\n\n      return results;\n    });\n\n    World_defineProperty(this, "locate", cTypes => {\n      for (const entity of this.entities.values()) {\n        if (entity.components.has(cTypes)) {\n          return entity;\n        }\n      }\n\n      return null;\n    });\n\n    World_defineProperty(this, "locateAll", cTypes => {\n      const results = [];\n\n      for (const entity of this.entities.values()) {\n        if (entity.components.has(cTypes)) {\n          results.push(entity);\n        }\n      }\n\n      return results;\n    });\n\n    World_defineProperty(this, "grab", cType => {\n      const entity = this.locate(cType);\n\n      if (entity) {\n        const cc = this.componentCollections.get(entity.id) || new ComponentCollection();\n        const component = cc.get(cType);\n        return {\n          entity,\n          component\n        };\n      }\n\n      return null;\n    });\n\n    World_defineProperty(this, "grabBy", (cType, predicate) => {\n      const entities = this.locateAll(cType);\n\n      for (const entity of entities) {\n        const cc = this.componentCollections.get(entity.id) || new ComponentCollection();\n        const component = cc.get(cType);\n\n        if (predicate(component)) {\n          return {\n            component,\n            entity\n          };\n        }\n      }\n\n      return null;\n    });\n\n    World_defineProperty(this, "grabAll", cType => {\n      return this.locateAll(cType).map(entity => ({\n        entity,\n        component: entity.components.get(cType)\n      }));\n    });\n\n    World_defineProperty(this, "get", (eid, cType) => {\n      const cc = this.componentCollections.get(eid) || new ComponentCollection();\n      return cc.get(cType);\n    });\n\n    World_defineProperty(this, "getTagged", tag => {\n      let entities = [];\n      const tagEntityIds = this.entitiesByTags.get(tag);\n\n      if (tagEntityIds) {\n        for (const entityId of tagEntityIds) {\n          const entity = this.entities.get(entityId);\n\n          if (entity) {\n            entities.push(entity);\n          }\n        }\n      }\n\n      return entities;\n    });\n\n    World_defineProperty(this, "set", (eid, component) => {\n      const cc = this.componentCollections.get(eid) || new ComponentCollection();\n      cc.add(component);\n      this.componentCollections.set(eid, cc);\n\n      for (const [ctArr, entitySet] of this.entitiesByCTypes) {\n        if (ctArr.every(cc.has)) {\n          entitySet.add(eid);\n        }\n      }\n\n      return this;\n    });\n\n    World_defineProperty(this, "remove", (eid, cType) => {\n      const cc = this.componentCollections.get(eid) || new ComponentCollection(); // remove entity from current entitiesByCTypes\n\n      for (const [ctArr, entitySet] of this.entitiesByCTypes) {\n        if (ctArr.every(cc.has)) {\n          entitySet.delete(eid);\n        }\n      }\n\n      cc.remove(cType); // Move entityId to new CTypes if needed.\n\n      for (const [ctArr, entitySet] of this.entitiesByCTypes) {\n        if (ctArr.every(cc.has)) {\n          entitySet.add(eid);\n        }\n      }\n    });\n  }\n\n  /**\n   * Internal method used in setting up a new system.\n   */\n  registerSystem(cTypes) {\n    this.entitiesByCTypes.set(cTypes, new Set());\n    return this;\n  }\n\n  registerEntity(entity) {\n    const cc = new ComponentCollection();\n    this.componentCollections.set(entity.id, cc);\n    this.entities.set(entity.id, entity);\n    return this;\n  }\n  /**\n   * Remove all components that belong to an entity.\n   */\n\n\n  clearEntityComponents(eid) {\n    this.componentCollections.set(eid, new ComponentCollection());\n\n    for (const entitySet of this.entitiesByCTypes.values()) {\n      if (entitySet.has(eid)) {\n        entitySet.delete(eid);\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Destroys an entity.\n   * Same as entity.destroy().\n   */\n\n\n  destroyEntity(eid) {\n    this.componentCollections.delete(eid);\n    this.entities.delete(eid);\n\n    for (const entitySet of this.entitiesByCTypes.values()) {\n      if (entitySet.has(eid)) {\n        entitySet.delete(eid);\n      }\n    }\n\n    return this;\n  }\n\n}\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/rng.js\n// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nvar getRandomValues = typeof crypto !== \'undefined\' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== \'undefined\' && typeof msCrypto.getRandomValues === \'function\' && msCrypto.getRandomValues.bind(msCrypto);\nvar rnds8 = new Uint8Array(16);\nfunction rng() {\n  if (!getRandomValues) {\n    throw new Error(\'crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported\');\n  }\n\n  return getRandomValues(rnds8);\n}\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/bytesToUuid.js\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\n\nfor (var bytesToUuid_i = 0; bytesToUuid_i < 256; ++bytesToUuid_i) {\n  byteToHex.push((bytesToUuid_i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset_) {\n  var offset = offset_ || 0; // Note: Be careful editing this code!  It\'s been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (byteToHex[buf[offset + 0]] + byteToHex[buf[offset + 1]] + byteToHex[buf[offset + 2]] + byteToHex[buf[offset + 3]] + \'-\' + byteToHex[buf[offset + 4]] + byteToHex[buf[offset + 5]] + \'-\' + byteToHex[buf[offset + 6]] + byteToHex[buf[offset + 7]] + \'-\' + byteToHex[buf[offset + 8]] + byteToHex[buf[offset + 9]] + \'-\' + byteToHex[buf[offset + 10]] + byteToHex[buf[offset + 11]] + byteToHex[buf[offset + 12]] + byteToHex[buf[offset + 13]] + byteToHex[buf[offset + 14]] + byteToHex[buf[offset + 15]]).toLowerCase();\n}\n\n/* harmony default export */ var esm_browser_bytesToUuid = (bytesToUuid);\n// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/v4.js\n\n\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return esm_browser_bytesToUuid(rnds);\n}\n\n/* harmony default export */ var esm_browser_v4 = (v4);\n// CONCATENATED MODULE: ./src/Entity.ts\nfunction Entity_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nclass Entity_Entity {\n  constructor(world) {\n    Entity_defineProperty(this, "_id", void 0);\n\n    Entity_defineProperty(this, "_world", void 0);\n\n    this._id = esm_browser_v4();\n    this._world = world;\n    /*\n    Registering with the World.\n    */\n\n    this._world.registerEntity(this);\n  }\n  /**\n   * Add a component to an Entity, doh.\n   */\n\n\n  add(component) {\n    this._world.set(this._id, component);\n\n    return this;\n  }\n  /**\n   * Add a tag to a component\n   */\n\n\n  addTag(tag) {\n    const entitySet = this._world.entitiesByTags.has(tag) ? this._world.entitiesByTags.get(tag) : new Set();\n\n    if (entitySet) {\n      entitySet.add(this._id);\n\n      this._world.entitiesByTags.set(tag, entitySet);\n    }\n\n    return this;\n  }\n  /**\n   * Determines if an entity has a component related to it.\n   */\n\n\n  has(cType) {\n    const cc = this._world.componentCollections.get(this._id) || new ComponentCollection();\n    return cc.has(cType);\n  }\n\n  hasTag(tag) {\n    if (this._world.entitiesByTags.has(tag)) {\n      const entitySet = this._world.entitiesByTags.get(tag);\n\n      if (entitySet) {\n        return entitySet.has(this._id);\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Get a component that belongs to an entity.\n   */\n\n\n  get(cType) {\n    const cc = this._world.componentCollections.get(this._id) || new ComponentCollection();\n    const component = cc.get(cType);\n    return component;\n  }\n  /**\n   * Get all components that have been added to an entity, via a ComponentCollection\n   */\n\n\n  getAll() {\n    return this._world.componentCollections.get(this._id) || new ComponentCollection();\n  }\n\n  remove(cType) {\n    this._world.remove(this._id, cType);\n\n    return this;\n  }\n\n  removeTag(tag) {\n    if (this._world.entitiesByTags.has(tag)) {\n      const entitySet = this._world.entitiesByTags.get(tag);\n\n      if (entitySet) {\n        entitySet.delete(this._id);\n\n        if (entitySet.size === 0) {\n          this._world.entitiesByTags.delete(tag);\n        }\n      }\n    }\n\n    return this;\n  }\n  /** Clears all components from an Entity */\n\n\n  clear() {\n    this._world.clearEntityComponents(this._id);\n\n    return this;\n  }\n\n  clearTags() {\n    for (const [tag, entitySet] of this._world.entitiesByTags.entries()) {\n      entitySet.delete(this._id);\n\n      if (entitySet.size === 0) {\n        this._world.entitiesByTags.delete(tag);\n      }\n    }\n\n    return this;\n  }\n\n  destroy() {\n    this._world.destroyEntity(this._id);\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get world() {\n    return this._world;\n  }\n  /**\n   * Get all components that have been added to an entity, via a ComponentCollection.\n   * Does the same thing as entityInstance.getAll().\n   */\n\n\n  get components() {\n    return this._world.componentCollections.get(this._id) || new ComponentCollection();\n  }\n  /**\n   * Retrieves all the tags that have been added to this entity.\n   */\n\n\n  get tags() {\n    let tags = new Set();\n\n    for (const [tag, entitySet] of this._world.entitiesByTags.entries()) {\n      if (entitySet.has(this._id)) {\n        tags.add(tag);\n      }\n    }\n\n    return tags;\n  }\n\n}\nfunction createEntity(world) {\n  const entity = new Entity_Entity(world);\n  return entity;\n}\n// CONCATENATED MODULE: ./src/System.ts\n\n\n\n/**\n * This is how you create a System.\n * @example\n * ```\n * createSystem(world, [\'ComponentType\'], ({ entity }) => \'Do fun system things here.\')\n * ```\n */\nfunction createSystem(world, cTypes, systemFunc) {\n  world.registerSystem(cTypes);\n  return () => {\n    let index = 0;\n    const size = world.entitiesByCTypes.size; // Used for matching the array of ComponentTypes which is the key\n    // of where the ComponentCollection is, with the array of ComponentTypes\n    // that are passes.\n    // Might be nice in the future to go back to a ref check on cTypes, but\n    // for now this doesn\'t seem to be that much of a perf hit.\n    // for (const ct of world.entitiesByCTypes.keys()) {\n    //   if (cTypes.length === ct.length && cTypes.every(c => ct.includes(c))) {\n    //     for (const eid of world.entitiesByCTypes.get(cTypes)) {\n    //       const args: SystemFuncArgs<CT> = {\n    //         entity: world.entities.get(eid),\n    //         components: world.componentCollections.get(eid),\n    //         world,\n    //         index,\n    //         size,\n    //         isFirst: index === 0,\n    //         isLast: index + 1 === size,\n    //       }\n    //       systemFunc(args);\n    //       index += 1;\n    //     }\n    //   }\n    // }\n\n    const cTypeArrs = world.entitiesByCTypes.get(cTypes) || new Set();\n\n    for (const eid of cTypeArrs) {\n      const args = {\n        entity: world.entities.get(eid) || new Entity_Entity(world),\n        components: world.componentCollections.get(eid) || new ComponentCollection(),\n        world,\n        index,\n        size,\n        isFirst: index === 0,\n        isLast: index + 1 === size\n      };\n      systemFunc(args);\n      index += 1;\n    }\n  };\n}\n// CONCATENATED MODULE: ./src/index.ts\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')}])}));